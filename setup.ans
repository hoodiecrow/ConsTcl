H2 Initialization

Before the interpreter can run, some elements must be initialized.

h5 Vector space

Initialize the memory space for vector contents.

CB(
set ::constcl::vectorSpaceSize [expr {1 * 1024}]
set ::constcl::vectorSpace [
  lrepeat $::constcl::vectorSpaceSize [N 0]]

set ::constcl::vectorAssign 0
CB)

The K{vsAlloc} procedure allocates vector space for strings and vectors. First
it checks that there is enough space left, and then it increases the fill marker
and returns its old value.

PR(
vsAlloc (internal);num num -> tnum
PR)

CB(
proc ::constcl::vsAlloc {num} {
  if {$::constcl::vectorSpaceSize -
    $::constcl::vectorAssign < $num} {
    error "not enough vector space left"
  }
  set va $::constcl::vectorAssign
  incr ::constcl::vectorAssign $num
  return $va
}
CB)

h5 Symbol table

Initialize the symbol table and gensym number.

CB(
unset -nocomplain ::constcl::symbolTable
set ::constcl::symbolTable [dict create]

set ::constcl::gensymnum 0
CB)

h5 Recursion limit

Make it possible to reach (fact 100). Probably more than needed, but this amount
can't hurt (default is 1000).

CB(
interp recursionlimit {} 2000
CB)

h5 A set of source code constants

Pre-make a set of constants (e.g. K{#NIL}, K{#t}, and K{#f})
and give them aliases for use in source text.

CB(
set #NIL [::constcl::NIL new]

set #t [::constcl::True new]

set #f [::constcl::False new]

set #UNS [::constcl::Unspecified new]

set #UND [::constcl::Undefined new]

set #EOF [::constcl::EndOfFile new]
CB)

TT(
::tcltest::test setup-1.0 {equivalence of instance and alias} -body {
        expr {[pe "'()"] == ${#NIL}}
} -result 1

::tcltest::test setup-1.1 {equivalence of instance and alias} -body {
        expr {[::constcl::NIL new] == ${#NIL}}
} -result 1

TT)

h5 Pi and nil

Crown the definition register with the queen of numbers (or at least
a double-precision floating point approximation).

IX pi constant
CB(
regvar pi [N 3.1415926535897931]
CB)

In this interpreter, K{nil} does refer to the empty list.

IX nil constant
CB(
regvar nil ${::#NIL}
CB)

h5 Environment startup

On startup, two K{Environment} objects called K{null_env} (the null environment,
not the same as K{null-environment} in Scheme) and K{global_env} (the global
environment) are created. 

Make K{null_env} empty and judgemental: this is where searches for unbound
symbols end up.

IX null\_env environment
CB(
::constcl::Environment create \
  ::constcl::null_env ${::#NIL} {}

oo::objdefine ::constcl::null_env {
  method find {sym} {
    self
  }
  method get {sym} {
    ::error "Unbound variable: [$sym name]"
  }
  method set {sym t_ i_} {
    ::error "Unbound variable: [$sym name]"
  }
}
CB)

Meanwhile, K{global_env} is populated with all the definitions from the
definitions register, K{defreg}. This is where top level evaluation happens.

IX global\_env environment
CB(
namespace eval ::constcl {
  Environment create global_env ${::#NIL} {} \
    ::constcl::null_env
  foreach v [dict values $defreg] {
    lassign $v key val
    lassign $val bt in
    global_env bind [S $key] $bt $in
  }
}
CB)

Thereafter, each time a user-defined procedure is called, a new K{Environment}
object is created to hold the bindings introduced by the call, and also a link
to the outer environment (the one closed over when the procedure was defined).


h5 The Scheme base

Load the Scheme base to add more definitions to the global environment.

IX Scheme base
CB(
pe {(load "schemebase.scm")}
CB)

TT(
::tcltest::test cons-15.0 {check for a symbol} -body {
    pew "pi"
} -output 3.1415926535897931\n
TT)

TT(
::tcltest::test cons-15.1 {dereference an unbound symbol} -body {
    pew "foo"
} -returnCodes error -result "not a variable name (foo)"

::tcltest::test cons-15.2 {dereference an unbound symbol: procedure} -body {
    pew "(foo)"
} -returnCodes error -result "unbound symbol (foo)"
TT)

TT(
::tcltest::test cons-1.0 {calculate circle area} -body {
    pew "(define (circle-area r) (* pi (* r r)))"
    pew "(circle-area 3)"
} -output 28.274333882308138\n

::tcltest::test cons-2.0 {calculate factorial} -body {
    unbind [S fact]
    pew "(define (fact n) (if (<= n 1) 1 (* n (fact (- n 1)))))"
    pew "(fact 10)"
} -output 3628800\n

::tcltest::test cons-2.1 {calculate factorial 100} -body {
  # the bug is that it's too long and eats up the limit stack when there's a
  # problem
    pew "(fact 100)"
} -output 93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000\n

::tcltest::test cons-2.2 {calculate circle-area factorial 10} -body {
    pew "(circle-area (fact 10))"
} -output 41369087205782.695\n

::tcltest::test cons-3.0 {count} -body {
    pew "(define (truthtoint val) (if val 1 0))"
    pew "(define (count item L) (if (not (null? L)) (+ (truthtoint (equal? item (car L))) (count item (cdr L))) 0))"
} -output ""

::tcltest::test cons-3.0 {count} -body {
    pew "(count 0 (list 0 1 2 3 0 0))"
} -output 3\n

::tcltest::test cons-3.1 {count} -body {
    pew "(count 'the '(the more the merrier the bigger the better))"
} -output 4\n

::tcltest::test cons-4.0 {twice} -body {
    pew "(define (twice x) (* 2 x))"
    pew "(twice 5)"
} -output 10\n

::tcltest::test cons-4.1 {twice} -body {
    pew "(define (repeat f) (lambda (x) (f (f x))))"
    pew "((repeat twice) 10)"
} -output 40\n

::tcltest::test cons-4.2 {twice} -body {
    pew "((repeat (repeat twice)) 10)"
} -output 160\n

::tcltest::test cons-4.3 {twice} -body {
    pew "((repeat (repeat (repeat twice))) 10)"
} -output 2560\n

::tcltest::test cons-4.4 {twice} -body {
    pew "((repeat (repeat (repeat (repeat twice)))) 10)"
} -output 655360\n

::tcltest::test cons-5.0 {fib-range} -body {
    pew "(define (fib n) (if (< n 2) 1 (+ (fib (- n 1)) (fib (- n 2)))))"
    pew "(define (range a b) (if (= a b) '() (cons a (range (+ a 1) b))))"
    pew "(range 0 10)"
} -output "(0 1 2 3 4 5 6 7 8 9)\n"

::tcltest::test cons-5.1 {fib-range} -body {
    pew "(map fib (range 0 10))"
} -output "(1 1 2 3 5 8 13 21 34 55)\n"

::tcltest::test cons-5.2 {fib-range} -body {
    pew "(map fib (range 0 20))"
} -output "(1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765)\n"

::tcltest::test cons-6.0 {procedure call with a list operator} -body {
    pew "((if #t + *) 2 3)"
} -output "5\n"

::tcltest::test cons-7.0 {assignment} -body {
  unbind [S r]
    pew "(begin (define r 10) (set! r 20) r)"
} -output "20\n"

::tcltest::test cons-7.1 {assignment returns a value} -body {
  unbind [S r]
    pew "(begin (define r 10) (set! r 20))"
} -output "20\n"

::tcltest::test cons-7.2 {assignment to an unbound symbol} -body {
    pew "(begin (set! XX 20))"
} -returnCodes error -result "XX is not bound"

::tcltest::test cons-8.0 {procedure definition} -body {
    pew "(lambda (r) (* r r))"
} -match regexp -output "#<proc-\\d+>\n"

::tcltest::test cons-8.1 {procedure with two expressions} -body {
  unbind [S f]
  unbind [S r]
    pew "(define (f) (define r 20) (* r r))"
    pew "(f)"
} -output "400\n"

::tcltest::test cons-8.2 {resolve procedure with two expressions} -body {
  unbind [S f]
    set x [p "(define (f) (define r 20) (* r r))"]
    set x [::constcl::rewrite-define $x ::constcl::global_env]
    w $x
} -output "(define f (lambda () (define r 20) (* r r)))\n"

::tcltest::test cons-9.0 {symbol?} -body {
    pew "(symbol? (quote foo99))"
} -output "#t\n"

::tcltest::test cons-10.0 {shadowing} -body {
  unbind [S r]
  unbind [S f]
    pew "(begin (define r 10) (define (f r) (set! r 20)) (f 30) r)"
} -output "10\n"

::tcltest::test cons-13.0 {expandquotes} -body {
    pew "''foo"
} -output "(quote foo)\n"

::tcltest::test cons-14.0 {Scheme cookbook, due to Jakub T. Jankiewicz} -body {
    pew "(define (every? fn list)
  (or (null? list)
      (and (fn (car list)) (every? fn (cdr list)))))"
    pew "(every? number? '(1 2 3 4))"
} -output "#t\n"

::tcltest::test cons-14.1 {Scheme cookbook, due to Jakub T. Jankiewicz} -body {
    pew "(define (adjoin x a)
  (if (member x a)
      a
      (cons x a)))"
    pew "(adjoin 'x '(a b c))"
} -output "(x a b c)\n"

::tcltest::test cons-14.2 {Scheme cookbook, due to Nils M Holm} -body {
    pew "(adjoin 'c '(a b c))"
} -output "(a b c)\n"

::tcltest::test cons-14.3 {Scheme cookbook, due to Jakub T. Jankiewicz} -body {
    pew "(define (list-index fn list)
  (let iter ((list list) (index 0))
    (if (null? list)
        -1
        (let ((item (car list)))
          (if (fn item)
              index
              (iter (cdr list) (+ index 1)))))))"
    pew "(define (>10 x) (> x 10))"
    pew "(list-index >10 '(1 2 3 4 10 11 12 13 14))"
} -output "5\n"

::tcltest::test cons-14.4 {Scheme cookbook, due to Jakub T. Jankiewicz} -body {
    pew "(define (take lst n)
  (let loop ((result '()) (i n) (lst lst))
    (if (or (null? lst) (<= i 0))
        (reverse result)
        (loop (cons (car lst) result) (- i 1) (cdr lst)))))"
    pew "(define (sublist-map n fn lst)
  (let loop ((lst lst) (result '()))
    (if (< (length lst) n)
        (reverse result)
        (let ((next-list (take lst n)))
          (loop (cdr lst) (cons (apply fn next-list) result))))))"
    pew "(sublist-map 2 < '(1 2 3 4))"
} -output "(#t #t #t)\n"

::tcltest::test cons-14.5 {Scheme cookbook, due to Jakub T. Jankiewicz} -body {
    pew "(define (remove fn lst)
  (let loop ((lst lst) (result '()))
    (if (null? lst)
        (reverse result)
        (let ((item (car lst)))
          (loop (cdr lst)
                (if (fn item) result (cons item result)))))))"
    pew "(remove >10 '(1 2 3 4 10 11 12 13 14))"
} -output "(1 2 3 4 10)\n"

::tcltest::test cons-14.6 {Scheme cookbook, due to Lassi Kortela} -body {
    pew {(define (group n lst)
  (if (< n 1)
      (error "group: n must be positive")
      (let loop ((lst lst) (m n) (g '()) (gs '()))
        (cond ((and (null? lst) (null? g))
               (reverse gs))
              ((or (null? lst) (zero? m))
               (loop lst n '() (cons (reverse g) gs)))
              (else
               (loop (cdr lst) (- m 1) (cons (car lst) g) gs))))))}
    pew "(group 3 (in-range 10))"
} -output "((0 1 2) (3 4 5) (6 7 8) (9))\n"

::tcltest::test cons-14.7 {Scheme cookbook, due to Lassi Kortela} -body {
    pew {(define (group-by f lst)
  (if (null? lst) '()
      (let ((first (car lst)))
        (let loop ((lst (cdr lst))
                   (key (f first))
                   (group (list first))
                   (groups '()))
          (if (null? lst)
              (reverse (cons (reverse group) groups))
              (let ((newkey (f (car lst))))
                (if (equal? key newkey)
                    (loop (cdr lst) key
                          (cons (car lst) group)
                          groups)
                    (loop (cdr lst) newkey
                          (list (car lst))
                          (cons (reverse group) groups)))))))))}
    pew "(group-by odd? '(1 3 5 2 1 6 4 1 7))"
} -output "((1 3 5) (2) (1) (6 4) (1 7))\n"

TT)

# vim: ft=tcl tw=80 ts=2 sw=2 sts=2 et 
