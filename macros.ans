
H3 Macros

One of Lisp's strong points is macros that allow concise, abstract expressions
that are automatically rewritten into other, more concrete but also more verbose
expressions. This interpreter does macro expansion, but the user can't define
new macros--the ones available are hardcoded in the code below.

A macro expander procedure takes an expression and an environment as
parameters.  In the end, the expanded expression is passed back to K{eval}.

H4 expand-and procedure

K{expand-and} expands the K{and} macro. It returns a K{begin}-expression if the
macro has 0 or 1 elements, and a nested K{if} construct otherwise.

PR(
expand-and (internal);expr expr env env -> expr
PR)

CB(
reg macro and

proc ::constcl::expand-and {expr env} {
  set tail [cdr $expr]
  if {[[length $tail] numval] == 0} {
    list [S begin] ${::#t}
  } elseif {[[length $tail] numval] == 1} {
    cons [S begin] $tail
  } else {
    do-and $tail ${::#t} $env
  }
}
CB)

B{do-and} procedure

K{do-and} is called recursively for every argument of K{expand-and} if there is
more than one.

PR(
do-and (internal);tail exprtail prev expr env env -> expr
PR)

IX do-and procedure
CB(
proc ::constcl::do-and {tail prev env} {
  if {[T [null? $tail]]} {
    return $prev
  } else {
    set env [MkEnv $env]
    /define [S first] [car $tail] $env
    /define [S rest] [do-and [cdr $tail] \
        [car $tail] $env] $env
    set qq "`(if ,first ,rest #f)"
    set expr [expand-quasiquote [parse $qq] $env]
    $env destroy
    return $expr
  }
}
CB)

TT(
::tcltest::test macros-2.0 {expand and macro} -body {
    pxw "(and)"
    pxw "(and #t)"
    pxw "(and (> 3 2))"
    pxw "(and (> 3 2) (= 7 8))"
} -output "(begin #t)\n(begin #t)\n(begin (> 3 2))\n(if (> 3 2) (if (= 7 8) (= 7 8) #f) #f)\n"

::tcltest::test macros-2.1 {run and macro} -body {
    pew "(and)"
    pew "(and #t)"
    pew "(and (> 3 2))"
    pew "(and (> 3 2) (= 7 8))"
} -output "#t\n#t\n#t\n#f\n"

TT)

H4 expand-del"! procedure

The macro K{del!} updates a property list. It removes a key-value pair if the key
is present, or leaves the list untouched if it isn't.

PR(
expand-del! (internal);expr expr env env -> expr
PR)

CB(
reg macro del!

proc ::constcl::expand-del! {expr env} {
  set tail [cdr $expr]
  set env [MkEnv $env]
  if {[T [null? $tail]]} {
    ::error "too few arguments, 0 of 2"
  }
  /define [S listname] [car $tail] $env
  if {[T [null? [cdr $tail]]]} {
    ::error "too few arguments, 1 of 2"
  }
  /define [S key] [cadr $tail] $env
  set qq "`(set! ,listname
             (delete! ,listname ,key))"
  set expr [expand-quasiquote [parse $qq] $env]
  $env destroy
  return $expr
}
CB)

TT(
::tcltest::test macros-6.0 {try expand del!} -body {
  pew {(define plist (list 'a 1 'b 2 'c 3))}
  pxw {(del! plist 'a)}
} -output "(set! plist (delete! plist (quote a)))\n"

::tcltest::test macros-6.1 {try run del!} -body {
  unbind [S plist]
  pew {(define plist (list 'a 1 'b 2 'c 3))}
  pew {(del! plist 'a)}
} -output "(b 2 c 3)\n"

::tcltest::test macros-6.2 {try run del!} -body {
  unbind [S plist]
  pew {(define plist (list 'a 1 'b 2 'c 3))}
  pew {(del! plist 'b)}
} -output "(a 1 c 3)\n"

::tcltest::test macros-6.3 {try run del!} -body {
  unbind [S plist]
  pew {(define plist (list 'a 1 'b 2 'c 3))}
  pew {(del! plist 'c)}
} -output "(a 1 b 2)\n"

::tcltest::test macros-6.4 {try run del!} -body {
  unbind [S plist]
  pew {(define plist (list 'a 1 'b 2 'c 3))}
  pew {(del! plist 'd)}
} -output "(a 1 b 2 c 3)\n"

TT)

H4 expand-for procedure

The K{expand-for} procedure expands the K{for} macro. It returns a K{begin}
construct containing the iterations of each clause (multiple clauses
weren't implemented for the longest time, but I brought up my strongest brain
cells and they did it).

PR(
expand-for (internal);expr expr env env -> expr
PR)

CB(
reg macro for

proc ::constcl::expand-for {expr env} {
  set res [do-for [cdr $expr] $env]
  lappend res [parse "'()"]
  return [list [S begin] {*}$res]
}
CB)

B{for-seq} procedure

K{for-seq} is a helper procedure that sets up the sequence of values that the
iteration is based on. First it evaluates the code that generates the sequence,
and then it converts it to a Tcl list.

PR(
for-seq (internal);seq expr env env -> tvals
PR)

IX for-seq procedure
CB(
proc ::constcl::for-seq {seq env} {
CB)

If E{seq} is a number, call the K{in-range} procedure to get a sequence.
Otherwise, evaluate E{seq}.

CB(
  if {[T [number? $seq]]} {
    set seq [in-range $seq]
  } else {
    set seq [eval $seq $env]
  }
CB)

Make the sequence a Tcl list, one way or another.

CB(
  if {[T [list? $seq]]} {
    set seq [splitlist $seq]
  } elseif {[T [string? $seq]]} {
    set seq [lmap c [split [$seq value] {}] {
      switch $c {
        " "  { MkChar #\\space }
        "\n" { MkChar #\\newline }
        default {
          MkChar #\\$c
        }
      }
    }]
  } elseif {[T [vector? $seq]]} {
    set seq [$seq value]
  } else {
    ::error "unknown sequence type [$seq tstr]"
  }
  return $seq
}
CB)

B{do-for} procedure

K{do-for} is another helper procedure which does most of the work in the
K{for/*} forms. It iterates over the clauses, extracting and preparing the
sequence for each, and stores each of the sequence steps in a dictionary under a
double key: the identifier and the ordinal of the step.

Then it creates a K{let} construct for each step, in which each of the clauses'
identifiers is bound to the step's value. The Tcl list of K{let} constructs is
returned.

Each clause's sequence is supposed to be the same length as the others. One
weakness of this implementation is that it doesn't ensure this, just hopes that
the user does the right thing.

PR(
do-for (internal);tail exprtail env env -> texprs
PR)

IX do-for procedure
CB(
proc ::constcl::do-for {tail env} {
  # make clauses a Tcl list
  set clauses [splitlist [car $tail]]
  set body [cdr $tail]
  set data [dict create]
  set length 0
  foreach clause $clauses {
    set id [car $clause]
    set sequence [for-seq [cadr $clause] $env]
    set length [llength $sequence]
    # save every id and step of the iteration
    for {set i 0} {$i < $length} {incr i} {
        dict set data $id $i [lindex $sequence $i]
    }
  }
  set res {}
  # for every step of the iteration...
  for {set i 0} {$i < $length} {incr i} {
    set decl {}
    # retrieve the ids
    foreach id [dict keys $data] {
      # list the id and the step
      lappend decl [
        list $id [dict get $data $id $i]]
    }
    # add to the structure of let constructs
    lappend res [list [S let] [
        list {*}$decl] {*}[splitlist $body]]
  }
  return $res
}
CB)

TT(
::tcltest::test macros-7.0 {expand for macro} -body {
    pxw "(for ((i '(1 2 3))) (display i))"
} -output "(begin (let ((i 1)) (display i)) (let ((i 2)) (display i)) (let ((i 3)) (display i)) (quote ()))\n"

::tcltest::test macros-7.1 {run for macro} -body {
    pew "(for ((i (quote (1 2 3)))) (display i))"
} -result "" -output 123()\n

::tcltest::test macros-7.2 {expand for macro} -body {
    pxw "(for ((i 4)) (display i))"
} -output "(begin (let ((i 0)) (display i)) (let ((i 1)) (display i)) (let ((i 2)) (display i)) (let ((i 3)) (display i)) (quote ()))\n"

::tcltest::test macros-7.3 {run for macro} -body {
    pew "(for ((i 4)) (display i))"
} -result "" -output "0123()\n"

TT)

H4 expand-for/and procedure

The K{expand-for/and} procedure expands the K{for/and} macro. It returns an K{and}
construct containing the iterations of the clauses.

The only differences from K{expand-for} is that it doesn't add K{(quote ())} and
that it wraps the list of iterations in K{and} instead of K{begin}.

PR(
expand-for/and (internal);expr expr env env -> expr
PR)

CB(
reg macro for/and

proc ::constcl::expand-for/and {expr env} {
  set tail [cdr $expr]
  set res [do-for $tail $env]
  return [list [S and] {*}$res]
}
CB)

TT(
::tcltest::test macros-8.0 {expand for macro} -body {
    pxw "(for/and ((i '(1 2 3))) (< 3 i))"
} -output "(and (let ((i 1)) (< 3 i)) (let ((i 2)) (< 3 i)) (let ((i 3)) (< 3 i)))\n"

TT)

H4 expand-for/list procedure

The K{expand-for/list} procedure expands the K{for/list} macro. It returns a K{list}
construct containing the iterations of each clause.

The only difference from K{expand-for/and} is that it wraps the list of iterations
in K{list} instead of K{and}.

PR(
expand for/list (internal);expr expr env env -> expr
PR)

CB(
reg macro for/list

proc ::constcl::expand-for/list {expr env} {
  set tail [cdr $expr]
  set res [do-for $tail $env]
  return [list [S list] {*}$res]
}
CB)

TT(
::tcltest::test macros-9.0 {expand for/list macro} -body {
    pxw {(for/list ([i (quote (1 2 3))]) (* i i))}
} -output "(list (let ((i 1)) (* i i)) (let ((i 2)) (* i i)) (let ((i 3)) (* i i)))\n"

::tcltest::test macros-9.1 {run for/list macro} -body {
    pew {(for/list ([i (quote (1 2 3))]) (* i i))}
} -output "(1 4 9)\n"

::tcltest::test macros-9.2 {expand for/list macro} -body {
    pxw {(for/list ([c "abc"]) (char-upcase c))}
} -output "(list (let ((c #\\a)) (char-upcase c)) (let ((c #\\b)) (char-upcase c)) (let ((c #\\c)) (char-upcase c)))\n"

::tcltest::test macros-9.3 {run for/list macro} -body {
    pew {(for/list ([c "abc"]) (char-upcase c))}
} -output "(#\\A #\\B #\\C)\n"

::tcltest::test macros-9.4 {expand for/list macro} -body {
    pxw {(for/list ([i (in-range 1 4)]) (* i i))}
} -output "(list (let ((i 1)) (* i i)) (let ((i 2)) (* i i)) (let ((i 3)) (* i i)))\n"

::tcltest::test macros-9.5 {run for/list macro} -body {
    pew {(for/list ([i (in-range 1 4)]) (* i i))}
} -output "(1 4 9)\n"

::tcltest::test macros-9.6 {expand for/list macro} -body {
    pxw {(for/list ([i (in-range 1 4)] [j "abc"]) (list i j))}
} -output "(list (let ((i 1) (j #\\a)) (list i j)) (let ((i 2) (j #\\b)) (list i j)) (let ((i 3) (j #\\c)) (list i j)))\n"

::tcltest::test macros-9.7 {run for/list macro} -body {
    pew {(for/list ([i (in-range 1 4)] [j "abc"]) (list i j))}
} -output "((1 #\\a) (2 #\\b) (3 #\\c))\n"

TT)

H4 expand-for/or procedure

The K{expand-for/or} procedure expands the K{for/or} macro. It returns an K{or}
construct containing the iterations of each clause.

The only difference from K{expand-for/list} is that it wraps the list of iterations
in K{or} instead of K{list}.

PR(
expand-for/or (internal);expr expr env env -> expr
PR)

CB(
reg macro for/or

proc ::constcl::expand-for/or {expr env} {
  set tail [cdr $expr]
  set res [do-for $tail $env]
  return [list [S or] {*}$res]
}
CB)

TT(
::tcltest::test macros-10.0 {expand for macro} -body {
    pxw "(for/or ((i '(1 2 3))) (< 3 i))"
} -output "(or (let ((i 1)) (< 3 i)) (let ((i 2)) (< 3 i)) (let ((i 3)) (< 3 i)))\n"

TT)

H4 expand-or procedure

K{expand-or} expands the K{or} macro. It returns a K{begin}-expression if the macro
has 0 or 1 elements, and a nested K{if} construct otherwise.

PR(
expand-or (internal);expr expr env env -> expr
PR)

CB(
reg macro or

proc ::constcl::expand-or {expr env} {
  set tail [cdr $expr]
  if {[[length $tail] numval] == 0} {
    return [list [S begin] ${::#f}]
  } elseif {[[length $tail] numval] == 1} {
    return [cons [S begin] $tail]
  } else {
    return [do-or $tail $env]
  }
}
CB)

TT(
::tcltest::test macros-12.2 {expand or macro} -body {
    pxw "(or)"
    pxw "(or #f)"
    pxw "(or (> 3 2))"
    pxw "(or (> 3 2) (= 7 8))"
} -output "(begin #f)\n(begin #f)\n(begin (> 3 2))\n(let ((x (> 3 2))) (if x x (let ((x (= 7 8))) (if x x #f))))\n"

TT)

B{do-or} procedure

K{do-or} is called recursively for each argument to K{expand-or} if there is more than
one argument. 

PR(
do-or (internal);tail exprtail env env -> expr
PR)

IX do-or procedure
CB(
proc ::constcl::do-or {tail env} {
  if {[T [null? $tail]]} {
    return ${::#f}
  } else {
    set env [MkEnv $env]
    /define [S first] [car $tail] $env
    /define [S rest] [do-or [cdr $tail] $env] $env
    set qq "`(let ((x ,first)) (if x x ,rest))"
    set expr [expand-quasiquote [parse $qq] $env]
    $env destroy
    return $expr
  }
}
CB)

H4 expand-pop"! procedure

The macro K{pop!} updates a list. It removes the first element.

PR(
expand-pop! (internal);expr expr env env -> expr
PR)

CB(
reg macro pop!

proc ::constcl::expand-pop! {expr env} {
  set tail [cdr $expr]
  set env [MkEnv $env]
  if {[T [null? $tail]]} {
      ::error "too few arguments:\n(pop! listname)"
  }
  if {[symbol? [car $tail]] eq ${::#f}} {
      ::error "SYMBOL expected:\n(pop! listname)"
  }
  /define [S listname] [car $tail] $env
  set qq "`(set! ,listname (cdr ,listname))"
  set expr [expand-quasiquote [parse $qq] $env]
  $env destroy
  return $expr
}
CB)

TT(
::tcltest::test macros-13.0 {try pop!} -body {
  pew "(let ((x '(a b c))) (pop! x))"
} -output "(b c)\n"

::tcltest::test macros-13.1 {try pop!, badly} -body {
  pew "(let ((x '(a b c))) (pop!))"
} -returnCodes error -result "too few arguments:\n(pop! listname)"

::tcltest::test macros-13.2 {try pop!, badly} -body {
  pew "(let ((x '(a b c))) (pop! '(a b c)))"
} -returnCodes error -result "SYMBOL expected:\n(pop! listname)"

TT)

H4 expand-push"! procedure

The macro K{push!} updates a list. It adds a new element as the new first
element. The K{push!} and K{pop!} macros together implement a stack on a list.

PR(
expand-push! (internal);expr expr env env -> expr
PR)

CB(
reg macro push!

proc ::constcl::expand-push! {expr env} {
  set tail [cdr $expr]
  set env [MkEnv $env]
  if {[T [null? $tail]]} {
    ::error \
      "too few arguments:\n(push! obj listname)"
  }
  /define [S obj] [car $tail] $env
  if {[T [null? [cdr $tail]]]} {
    ::error \
      "too few arguments:\n(push! obj listname)"
  }
  if {[symbol? [cadr $tail]] eq ${::#f}} {
    ::error \
      "SYMBOL expected:\n(push! obj listname)"
  }
  /define [S listname] [cadr $tail] $env
  set qq "`(set!
             ,listname
             (cons ,obj ,listname))"
  set expr [expand-quasiquote [parse $qq] $env]
  $env destroy
  return $expr
}
CB)

TT(
::tcltest::test macros-14.0 {try push!} -body {
  pew "(let ((x '(a b c))) (push! 'd x))"
} -output "(d a b c)\n"
TT)

H4 expand-put"! procedure

The macro K{put!} updates a property list. It adds a key-value pair if the key
isn't present, or changes the value in place if it is.

PR(
expand-put! (internal);expr expr env env -> expr
PR)

CB(
reg macro put!

proc ::constcl::expand-put! {expr env} {
  set tail [cdr $expr]
  set env [::constcl::MkEnv $env]
  if {[T [null? $tail]]} {
      ::error "too few arguments, 0 of 3"
  }
  /define [S name] [car $tail] $env
  if {[T [null? [cdr $tail]]]} {
      ::error "too few arguments, 1 of 3"
  }
  /define [S key] [cadr $tail] $env
  if {[T [null? [cddr $tail]]]} {
      ::error "too few arguments, 2 of 3"
  }
  /define [S val] [caddr $tail] $env
  set qq "`(let ((idx (list-find-key ,name ,key)))
             (if (< idx 0)
               (set! 
                 ,name
                 (append (list ,key ,val) ,name))
               (begin
                 (list-set! ,name (+ idx 1) ,val)
                 ,name)))"
  set expr [expand-quasiquote [parse $qq] $env]
  $env destroy
  return $expr
}
CB)

TT(
::tcltest::test macros-15.0 {expand put!} -body {
    pxw "(put! plist 'c 7)"
} -output "(let ((idx (list-find-key plist (quote c)))) (if (< idx 0) (set! plist (append (list (quote c) 7) plist)) (begin (list-set! plist (+ idx 1) 7) plist)))\n"

::tcltest::test macros-15.1 {run put!} -body {
    pew "(define plst (list 'a 1 'b 2 'c 3 'd 4 'e 5))"
    pew "(put! plst 'c 7)"
    pew "(put! plst 'f 6)"
    pew "plst"
} -output "(a 1 b 2 c 7 d 4 e 5)\n(f 6 a 1 b 2 c 7 d 4 e 5)\n(f 6 a 1 b 2 c 7 d 4 e 5)\n"

::tcltest::test macros-15.2 {expand put!} -body {
    pew "(define listname 'plist)"
    pew "(define key ''c)"
    pew "(define val 7)"
    pxw "`(let ((idx (list-find-key ,listname ,key))) (if (< idx 0) (set! ,listname (append (list ,key ,val) ,listname)) (begin (list-set! plist (+ idx 1) ,val) ,listname)))"
} -output "(let ((idx (list-find-key plist (quote c)))) (if (< idx 0) (set! plist (append (list (quote c) 7) plist)) (begin (list-set! plist (+ idx 1) 7) plist)))\n"

TT)

H4 expand-quasiquote procedure

A quasi-quote isn't a macro, but we will deal with it in this section anyway.
K{expand-quasiquote} traverses a quasi-quoted structure searching for K{unquote}
and K{unquote-splicing}. This code is brittle and sprawling and I barely
understand it myself, but it works (and is the basis for a lot of the special
form/macro expanders).

PR(
expand-quasiquote (internal);expr expr env env -> expr
PR)

CB(
reg macro quasiquote

proc ::constcl::expand-quasiquote {expr env} {
  set tail [cdr $expr]
  set qqlevel 0
  if {[T [list? [car $tail]]]} {
    set node [car $tail]
    return [qq-visit-child $node 0 $env]
  } elseif {[T [vector? [car $tail]]]} {
    set vect [car $tail]
    set res {}
    for {set i 0} {$i < [
        [vector-length $vect] numval]} {incr i} {
      set idx [MkNumber $i]
      set vecref [vector-ref $vect $idx]
      if {[T [pair? $vecref]] &&
          [T [eq? [car $vecref] [
            S unquote]]]} {
        if {$qqlevel == 0} {
          lappend res [eval [cadr $vecref] $env]
        }
      } elseif {[T [pair? $vecref]] &&
          [T [eq? [car $vecref] [
            S unquote-splicing]]]} {
        if {$qqlevel == 0} {
          lappend res {*}[splitlist [
            eval [cadr $vecref] $env]]
        }
      } elseif {[T [atom? $vecref]]} {
        lappend res $vecref
      } else {
      }
    }
    return [list [S "vector"] {*}$res]
  }
}
CB)

B{qq-visit-child} procedure

PR(
qq-visit-child (internal);node lexprs qqlevel tnum env env -> lexprs
PR)

IX qq-visit-child procedure
CB(
proc ::constcl::qq-visit-child {node qqlevel env} {
  if {$qqlevel < 0} {
    set qqlevel 0
  }
  if {[T [list? $node]]} {
    set res {}
    foreach child [splitlist $node] {
      if {[T [pair? $child]] &&
          [T [eq? [car $child] [S unquote]]]} {
        if {$qqlevel == 0} {
          lappend res [eval [cadr $child] $env]
        } else {
          lappend res [list [S unquote] [
            qq-visit-child [cadr $child] [
            expr {$qqlevel - 1}] $env]]
        }
      } elseif {[T [pair? $child]] &&
          [T [eq? [car $child] [
          S unquote-splicing]]]} {
        if {$qqlevel == 0} {
          lappend res {*}[splitlist [
            eval [cadr $child] $env]]
        }
      } elseif {[T [pair? $child]] &&
          [T [eq? [car $child] [S quasiquote]]]} {
        lappend res [list [S quasiquote] [car [
          qq-visit-child [cdr $child] [
            expr {$qqlevel + 1}] $env]]] 
      } elseif {[T [atom? $child]]} {
        lappend res $child
      } else {
        lappend res [
          qq-visit-child $child $qqlevel $env]
      }
    }
  }
  return [list {*}$res]
}
CB)

TT(
::tcltest::test macros-16.0 {quasiquotation} -body {
    pw {`(list ,(+ 1 2) 4)}
} -output "(quasiquote (list (unquote (+ 1 2)) 4))\n"

::tcltest::test macros-16.1 {quasiquotation} -body {
    w [::constcl::expand-quasiquote [p {`(list ,(+ 1 2) 4)}] ::constcl::global_env]
    pew {(define name 'a)}
    w [::constcl::expand-quasiquote [p {`(list ,name ',name)}] ::constcl::global_env]
    w [::constcl::expand-quasiquote [p {`(a ,(+ 1 2) ,@(map abs '(4 -5 6)) b)}] ::constcl::global_env]
    w [::constcl::expand-quasiquote [p {`(( foo ,(- 10 3)) ,@(cdr '(c)) ,(car '(cons)))}] ::constcl::global_env]
    w [::constcl::expand-quasiquote [p {`#(10 5 ,(sqrt 4) ,@(map sqrt '(16 9)) 8)}] ::constcl::global_env]
} -output "(list 3 4)\n(list a (quote a))\n(a 3 4 5 6 b)\n((foo 7) cons)\n(vector 10 5 2.0 4.0 3.0 8)\n"

::tcltest::test macros-16.2 {quasiquotation} -body {
    w [::constcl::expand-quasiquote [p {`(a `(b ,(+ 1 2) ,(foo ,(+ 1 3) d) e) f)}] ::constcl::global_env]
if no {
    pew {(let ((name1 'x)
      (name2 'y))
  `(a `(b ,,name1 ,',name2 d) e))}
    pew {'(quasiquote (list (unquote (+ 1 2)) 4))}
}
} -output "(a (quasiquote (b (unquote (+ 1 2)) (unquote (foo 4 d)) e)) f)\n"

#(a `(b (unquote x) (unquote (quote y)) d) e)\n(quasiquote (list (unquote (+ 1 2)) 4))\n"

TT)

H4 expand-unless procedure

K{unless} is a conditional like K{if}, but it takes a number
of expressions. It executes them on a false outcome of K{car $tail}.

PR(
expand-unless (internal);expr expr env env -> expr
PR)

CB(
reg macro unless

proc ::constcl::expand-unless {expr env} {
  set tail [cdr $expr]
  set env [MkEnv $env]
  /define [S tail] $tail $env
  set qq "`(if ,(car tail)
             '()
             (begin ,@(cdr tail)))"
  set expr [expand-quasiquote [parse $qq] $env]
  $env destroy
  return $expr
}
CB)

TT(
::tcltest::test macros-17.0 {conditional: expand unless macro} -body {
    pxw "(unless (zero? 0) (* 4 4) (- 5 5))"
} -output "(if (zero? 0) (quote ()) (begin (* 4 4) (- 5 5)))\n"

::tcltest::test macros-17.1 {conditional: run unless macro} -body {
    pew "(unless (zero? 0) (* 4 4) (- 5 5))"
} -output "()\n"

TT)

H4 expand-when procedure

K{when} is a conditional like K{if}, but it takes a number
of expressions. It executes them on a true outcome of K{car $tail}.

PR(
expand-when (internal);expr expr env env -> expr
PR)

CB(
reg macro when

proc ::constcl::expand-when {expr env} {
  set tail [cdr $expr]
  set env [MkEnv $env]
  /define [S tail] $tail $env
  set qq "`(if ,(car tail)
             (begin ,@(cdr tail))
             '())"
  set expr [expand-quasiquote [parse $qq] $env]
  $env destroy
  return $expr
}
CB)

TT(

::tcltest::test macros-18.2 {conditional: expand when macro} -body {
    pxw "(when (zero? 0) (* 4 4) (- 5 5))"
} -output "(if (zero? 0) (begin (* 4 4) (- 5 5)) (quote ()))\n"

::tcltest::test macros-18.3 {conditional: run when macro} -body {
    pew "(when (zero? 0) (* 4 4) (- 5 5))"
} -output "0\n"

TT)

# vim: ft=tcl tw=80 ts=2 sw=2 sts=2 et 
