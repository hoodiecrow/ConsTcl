
H3 Input and output

Like most programming languages, Scheme has input and output facilities beyond
mere K{read} and K{write}.  I/O is based on the E{port} R{abstraction}{ports} of a
character supplying or receiving device. There are four kinds of ports:

EN file input (InputPort)
EN file output (OutputPort)
EN string input (StringInputPort)
EN string output (StringOutputPort)

and there is also the K{Port} kind, which isn't used other than as a base class.

H4 Port class

CB(
oo::abstract create ::constcl::Port {
  superclass ::constcl::Base
  variable handle
CB)

The K{Port} constructor uses a fake argument to store a value in the instance
variable K{handle}. If the value isn't provided, K{handle} gets the value of the
empty list.

PR(
Port constructor (internal);?h? handle -> none
PR)

CB(
  constructor {args} {
    if {[llength $args]} {
      lassign $args handle
    } else {
      set handle ${::#NIL}
    }
  }
CB)

The K{handle} method yields the stored handle value.

PR(
(concrete instance) handle (internal);-> handlenil
PR)

CB(
  method handle {} {
    set handle
  }
CB)

The K{close} method acts to close the stored handle's channel, and sets the
stored handle to the empty list.

PR(
(concrete instance) close (internal);-> none
PR)

CB(
  method close {} {
    close $handle
    set handle ${::#NIL}
    return
  }
}
CB)

H4 InputPort class

The InputPort class extends Port with the ability to open a channel for reading,
and to get a character from the channel and to detect end-of-file.

CB(
oo::class create ::constcl::InputPort {
  superclass ::constcl::Port
  variable handle
CB)

The InputPort K{open} method takes a file name and attempts to open it for
reading. If it succeeds, it sets the stored handle to the opened channel. If it
fails, it sets the stored handle to the empty list.

PR(
(InputPort instance) open (internal);name filename -> handlenil
PR)

CB(
  method open {name} {
    try {
      set handle [open [$name value] "r"]
    } on error {} {
      set handle ${::#NIL}
    }
    return $handle
  }
CB)

The K{get} method reads one character from the channel of the stored handle.

PR(
(InputPort instance) get (internal);-> tchr
PR)

CB(
  method get {} {
    chan read $handle 1
  }
CB)

The K{eof} method reports end-of-file status on the channel of the stored
handle.

PR(
(InputPort instance) eof (internal);-> tbool
PR)

CB(
  method eof {} {
    chan eof $handle
  }
CB)

The K{copy} method returns a new instance of InputPort which is a copy of this
instance, sharing the stored handle.

PR(
(InputPort instance) copy (internal);-> iport
PR)

CB(
  method copy {} {
    ::constcl::InputPort new $handle
  }
CB)

The K{tstr} method yields the external representation of the port as a Tcl
string. It is used by error messages and the K{write} method.

PR(
(InputPort instance) tstr (internal);-> tstr
PR)

CB(
  method tstr {} {
    regexp {(\d+)} [self] -> num
    return "#<input-port-$num>"
  }
}
CB)

H4 MkInputPort generator

K{MkInputPort} generates an InputPort object.

PR(
MkInputPort (internal);?handle? handle -> iport
PR)

CB(
interp alias {} ::constcl::MkInputPort \
  {} ::constcl::InputPort new
CB)

H4 StringInputPort class

The StringInputPort class extends Port with the ability to get a character from
the buffer and detect end-of-file. It turns K{open} and K{close} into no-op
methods.

CB(
oo::class create ::constcl::StringInputPort {
  superclass ::constcl::Port
  variable buffer read_eof
CB)

The StringInputPort constructor simply copies a given string into the stored
buffer and sets the K{read_eof} state variable to 0.

PR(
StringInputPort constructor (internal);str tstr -> none
PR)

CB(
  constructor {str} {
    set buffer $str
    set read_eof 0
  }
CB)

The K{open} and K{close} methods are present but don't do anything.

PR(
(StringInputPort instance) open (internal);name filename -> none
PR)

PR(
(StringInputPort instance) close (internal);-> none
PR)

CB(
  method open {name} {}
  method close {} {}
CB)

The StringInputPort K{get} method reads one character from the buffer. If the
buffer is empty, K{#EOF} is returned and K{read_eof} is set to 1. The buffer is
reduced by one character.

PR(
(StringInputPort instance) get (internal);-> tchreof
PR)

CB(
  method get {} {
    if {[::string length $buffer] == 0} {
      set read_eof 1
      return #EOF
    }
    set c [::string index $buffer 0]
    set buffer [::string range $buffer 1 end]
    return $c
  }
CB)

The K{eof} method reports end-of-file status on the buffer.

PR(
(StringInputPort instance) eof (internal);-> tbool
PR)

CB(
  method eof {} {
    return $read_eof
  }
CB)

The K{copy} method creates a new instance with a (non-shared) copy of the buffer
such as it is at this point in time.

PR(
(StringInputPort instance) copy (internal);-> siport
PR)

CB(
  method copy {} {
    ::constcl::StringInputPort new $buffer
  }
CB)

The K{tstr} method yields the external representation of the string input port
as a Tcl string. It is used by error messages and the K{write} method.

PR(
(StringInputPort instance) tstr (internal);-> tstr
PR)

CB(
  method tstr {} {
    regexp {(\d+)} [self] -> num
    return "#<string-input-port-$num>"
  }
}
CB)

H4 MkStringInputPort generator

K{MkStringInputPort} generates a StringInputPort object.

PR(
MkStringInputPort (internal);str str -> siport
PR)

CB(
interp alias {} ::constcl::MkStringInputPort \
  {} ::constcl::StringInputPort new
CB)

H4 OutputPort class

OutputPort extends Port with the ability to open a channel for writing, and to
put a string through the channel, print a newline, and flush the channel.

CB(
oo::class create ::constcl::OutputPort {
  superclass ::constcl::Port
  variable handle
CB)

The OutputPort K{open} method attempts to open a channel for writing on a given
file name, setting the stored handle to the channel if it succeeds and to the
empty list if it fails.

The K{open} method is locked with an error command for safety. Only remove this
line if you really know what you're doing: once it is unlocked, the K{open}
method can potentially overwrite existing files.

PR(
(OutputPort instance) open (internal);name filename -> handlenil
PR)

CB(
  method open {name} {
    ::error "remove this line to use"
    try {
      set handle [open [$name value] "w"]
    } on error {} {
      set handle ${::#NIL}
    }
    return $handle
  }
CB)

The OutputPort K{put} method outputs a string on the channel in the stored
handle.

PR(
(OutputPort instance) put (internal);str tstr -> none
PR)

CB(
  method put {str} {
    puts -nonewline $handle $str
  }
CB)

The K{newline} method prints a newline on the channel in the stored handle.

PR(
(OutputPort instance) newline (internal);-> none
PR)

CB(
  method newline {} {
    puts $handle {}
  }
CB)

The K{flush} method flushes the output channel in the stored handle.

PR(
(OutputPort instance) flush (internal);-> none
PR)

CB(
  method flush {} {
    flush $handle
  }
CB)

The K{copy} method returns a new instance of OutputPort which is a copy of this
instance, sharing the stored handle.

PR(
PR)

CB(
  method copy {} {
    ::constcl::OutputPort new $handle
  }
CB)

The K{tstr} method yields the external representation of the port as a Tcl
string. It is used by error messages and the K{write} method.

PR(
(OutputPort instance) tstr (internal);-> tstr
PR)

CB(
  method tstr {} {
    regexp {(\d+)} [self] -> num
    return "#<output-port-$num>"
  }
}
CB)

H4 MkOutputPort generator

K{MkOutputPort} generates an OutputPort object.

PR(
MkOutputPort (internal);?handle? handle -> oport
PR)

CB(
interp alias {} ::constcl::MkOutputPort \
  {} ::constcl::OutputPort new
CB)

H4 StringOutputPort class

StringOutputPort extends Port with the ability to put strings into a string
buffer. The K{tostring} method yields the current contents of the buffer.

CB(
oo::class create ::constcl::StringOutputPort {
  superclass ::constcl::Port
  variable buffer
CB)

The StringOutputPort constructor uses a fake argument to optionally initialize
the internal buffer, which otherwise is empty.

PR(
StringOutputPort constructor (internal);?str? tstr -> none
PR)

CB(
  constructor {args} {
    if {[llength $args]} {
      lassign $args str
      set buffer $str
    } else {
      set buffer {}
    }
  }
CB)

The K{open} and K{close} methods are present but don't do anything.

PR(
(StringOutputPort instance) open (internal);name filename -> none
PR)

PR(
(StringOutputPort instance) close (internal);-> none
PR)

CB(
  method open {name} {}
  method close {} {}
CB)

The StringOutputPort K{put} method appends a string to the internal buffer.

PR(
(StringOutputPort instance) put (internal);str tstr -> none
PR)

CB(
  method put {str} {
    append buffer $str
    return
  }
CB)

The K{newline} method appends a newline character to the internal buffer.

PR(
(StringOutputPort instance) newline (internal);-> none
PR)

CB(
  method newline {} {
    append buffer \n
  }
CB)

The K{flush} method is present but does nothing.

PR(
(StringOutputPort instance) flush (internal);-> none
PR)

CB(
  method flush {} {}
CB)

The K{tostring} method dumps the internal buffer as a string.

PR(
(StringOutputPort instance) tostring (internal);-> str
PR)

CB(
  method tostring {} {
    MkString $buffer
  }
CB)

The K{copy} method returns a new instance of StringOutputPort which is a copy of this
instance, with a (non-shared) copy of the internal buffer such as it is at this
point in time.

PR(
(StringOutputPort instance) copy (internal);-> soport
PR)

CB(
  method copy {} {
    ::constcl::StringOutputPort new $buffer
  }
CB)

The K{tstr} method yields the external representation of the string output port
as a Tcl string. It is used by error messages and the K{write} method.

PR(
(StringOutputPort instance) tstr (internal);-> tstr
PR)

CB(
  method tstr {} {
    regexp {(\d+)} [self] -> num
    return "#<string-output-port-$num>"
  }
}
CB)

H4 MkStringOutputPort generator

K{MkStringOutputPort} generates a StringOutputPort object.

PR(
MkStringOutputPort (internal);?str? str -> soport
PR)

CB(
interp alias {} ::constcl::MkStringOutputPort \
  {} ::constcl::StringOutputPort new
CB)

B{Input_Port} variable

B{Output_port} variable

These two variables store the current configuration of the shared input and
output ports globally. They are initially set to standard input and output
respectively.

CB(
set ::constcl::Input_port [
  ::constcl::MkInputPort stdin]
set ::constcl::Output_port [
  ::constcl::MkOutputPort stdout]
CB)

H4 port? procedure

K{port?} recognizes Port objects, i.e. all kinds of ports.

CB(
reg port?

proc ::constcl::port? {val} {
  typeof? $val Port
}
CB)

H4 call-with-input-file procedure

K{call-with-input-file} opens a file for input and passes the port to K{proc}.
The file is closed again once K{proc} returns. The result of the call is
returned.

PR(
call-with-input-file (public);filename filename proc proc -> val
PR)

CB(
reg call-with-input-file

proc ::constcl::call-with-input-file {filename proc} {
  set port [open-input-file $filename]
  set res [invoke $proc [list $port]]
  close-input-port $port
  $port destroy
  return $res
}
CB)

TT(
::tcltest::test io-1.0 {try call-with-input-file} -setup {
  ::tcltest::makeFile {99 foo "bar"} iofile.txt
} -body {
  pe {(let ((f (lambda (port)  (let ((n 0) (s 0))
       (set! n (read port))
       (set! s (read port))
       (display s)
       (display n)))))
         (call-with-input-file "iofile.txt" f))}
} -cleanup {
  ::tcltest::removeFile iofile.txt
} -output "foo99"
TT)

H4 call-with-output-file procedure

K{call-with-output-file} opens a file for output and passes the port to K{proc}.
The file is closed again once K{proc} returns. The result of the call is
returned.

PR(
call-with-output-file (public);filename filename proc proc -> val
PR)

CB(
reg call-with-output-file

proc ::constcl::call-with-output-file {filename proc} {
  set port [open-output-file $filename]
  set res [invoke $proc [list $port]]
  close-output-port $port
  $port destroy
  return $res
}
CB)

TT(
::tcltest::test io-2.0 {try call-with-output-file} -setup {
} -body {
  pe {(let ((f (lambda (port)
       (display 'foo port)
       (display 99 port))))
         (call-with-output-file "iofile.txt" f))}
    puts [::tcltest::viewFile iofile.txt]
} -cleanup {
  ::tcltest::removeFile iofile.txt
} -returnCodes error -result "remove this line to use" 
#-output "foo99\n"
TT)

H4 input-port? procedure

K{input-port?} recognizes an K{InputPort} or K{StringInputPort} object.

PR(
input-port? (public);val val -> bool
PR)

CB(
reg input-port?

proc ::constcl::input-port? {val} {
  if {[T typeof? $val InputPort]} {
    return ${::#t}
  } elseif {[T typeof? $val StringInputPort]} {
    return ${::#t}
  } else {
    return ${::#f}
  }
}
CB)

H4 output-port? procedure

K{output-port?} recognizes an K{OutputPort} or K{StringOutputPort} object.

PR(
output-port? (public);val val -> bool
PR)

CB(
reg output-port?

proc ::constcl::output-port? {val} {
  if {[T typeof? $val OutputPort]} {
    return ${::#t}
  } elseif {[T typeof? $val StringOutputPort]} {
    return ${::#t}
  } else {
    return ${::#f}
  }
}
CB)

H4 current-input-port procedure

K{current-input-port} makes a copy of the current shared input port.

PR(
current-input-port (public);-> port
PR)

CB(
reg current-input-port

proc ::constcl::current-input-port {} {
  return [$::constcl::Input_port copy]
}
CB)

H4 current-output-port procedure

K{current-output-port} makes a copy of the current shared output port.

PR(
current-output-port (public);-> port
PR)

CB(
reg current-output-port

proc ::constcl::current-output-port {} {
  return [$::constcl::Output_port copy]
}
CB)

H4 with-input-from-file procedure

K{with-input-from-file} opens a file for input and calls a `thunk' while the
file is open.  The file is closed again when the call is done.

PR(
with-input-from-file (public);filename filename thunk proc -> none
PR)

CB(
reg with-input-from-file

proc ::constcl::with-input-from-file {filename thunk} {
  set newport [open-input-file $filename]
  if {[$newport handle] ne ${::#NIL}} {
    set oldport $::constcl::Input_port
    set ::constcl::Input_port $newport
    $thunk call
    set ::constcl::Input_port $oldport
    close-input-port $newport
  }
  $newport destroy
}
CB)

TT(
::tcltest::test io-3.0 {try with-input-from-file} -setup {
  ::tcltest::makeFile {42} foo.txt
} -body {
  pew "(with-input-from-file \"foo.txt\" (lambda () (write (read))))"
} -cleanup {
  ::tcltest::removeFile foo.txt
} -output "42\n"
TT)

H4 with-output-to-file procedure

K{with-output-to-file} opens a file for output and calls a `thunk' while the
file is open.  The file is closed again when the call is done.

PR(
with-output-to-file (public);filename filename thunk proc -> none
PR)

CB(
reg with-output-to-file

proc ::constcl::with-output-to-file {filename thunk} {
  set newport [open-output-file $filename]
  if {[$newport handle] ne ${::#NIL}} {
    set oldport $::constcl::Output_port
    set ::constcl::Output_port $newport
    $thunk call
    set ::constcl::Output_port $oldport
    close-input-port $newport
  }
  $newport destroy
}
CB)

TT(
::tcltest::test io-4.0 {try with-output-to-file} -setup {
} -body {
  pew "(with-output-to-file \"foo.txt\" (lambda () (write 42)))"
  puts [::tcltest::viewFile foo.txt]
} -cleanup {
  ::tcltest::removeFile foo.txt
} -returnCodes error -result "remove this line to use"
#-output "42\n"
TT)

H4 open-input-file procedure

K{open-input-file} opens a file for input and returns the port.

PR(
open-input-file (public);filename filename -> iport
PR)

CB(
reg open-input-file

proc cnof {} {return "could not open file"}
proc fae {} {return "file already exists"}

proc ::constcl::open-input-file {filename} {
  set p [MkInputPort]
  $p open $filename
  if {[$p handle] eq ${::#NIL}} {
    set fn [$filename value]
    error "open-input-file: [cnof] $fn"
  }
  return $p
}
CB)

H4 open-output-file procedure

K{open-output-file} opens a file for output and returns the port. Throws an
error if the file already exists.

PR(
open-output-file (public);filename filename -> oport
PR)

CB(
reg open-output-file

proc ::constcl::open-output-file {filename} {
  if {[file exists $filename]} {
    error "open-output-file: [fae] $filename"
  }
  set p [MkOutputPort]
  $p open $filename
  if {[$p handle] eq ${::#NIL}} {
    error "open-output-file: [cnof] $filename"
  }
  return $p
}
CB)

H4 close-input-port procedure

K{close-input-port} closes an input port.

PR(
close-input-port (public);port iport -> none
PR)

CB(
reg close-input-port

proc ::constcl::close-input-port {port} {
  if {[$port handle] eq "stdin"} {
    error "don't close the standard input port"
  }
  $port close
}
CB)

H4 close-output-port procedure

K{close-output-port} closes an output port.

PR(
close-output-port (public);port oport -> none
PR)

CB(
reg close-output-port

proc ::constcl::close-output-port {port} {
  if {[$port handle] eq "stdout"} {
    error "don't close the standard output port"
  }
  $port close
}
CB)

K{write} is implemented in the R{output}{output} chapter.

K{display} is implemented in the same chapter.

H4 newline procedure

K{newline} outputs a newline character. Especially helpful when using K{display}
for output, since it doesn't end lines with newline.

PR(
newline (public);?port? oport -> none
PR)

CB(
reg newline

proc ::constcl::newline {args} {
  if {[llength $args]} {
    lassign $args port
  } else {
    set port [current-output-port]
  }
  $port newline
}
CB)

TT(
::tcltest::test io-5.0 {try newline} -body {
  pe "(display \"foo\")"
  pe "(newline)"
  pe "(display \"bar\")"
} -output "foo\nbar"
TT)

B{load}

K{load} reads a Scheme source file and evals the expressions in it in the global
environment. The procedure is a ConsTcl mix of Scheme calls and Tcl syntax.

PR(
load (public);filename filename -> none
PR)

CB(
reg load

proc ::constcl::load {filename} {
  try {
    open-input-file $filename
  } on ok port {
  } on error {} {
    return
  }
  if {[$port handle] ne ${::#NIL}} {
    set expr [read $port]
    while {$expr ne "#EOF"} {
      eval $expr
      set expr [read $port]
    }
    close-input-port $port
  }
  $port destroy
}
CB)

# vim: ft=tcl tw=80 ts=2 sw=2 sts=2 et 
