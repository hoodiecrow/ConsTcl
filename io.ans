
H3 Input and output

MD(
Like most programming languages, Scheme has input and output facilities beyond
direct K{read} and K{write}.  I/O is based on the E{port} abstraction of a
character supplying or receiving device. There are four kinds of ports:
MD)

EN file input (InputPort)
EN file output (OutputPort)
EN string input (StringInputPort)
EN string output (StringOutputPort)

MD(
and there is also the K{Port} type, which isn't used other than as a base class.
MD)

H4 Port class

CB(
catch { ::constcl::Port destroy }

oo::class create ::constcl::Port {
  superclass ::constcl::NIL
  variable handle
  constructor {args} {
    if {[llength $args]} {
      lassign $args handle
    } else {
      set handle #NIL
    }
  }
  method handle {} {
    set handle
  }
  method close {} {
    close $handle
    set handle #NIL
    return
  }
  method write {p} {
    regexp {(\d+)} [self] -> num
    $p put "#<port-$num>"
  }
  method display {p} {
    my write $p
  }
}
CB)

H4 InputPort class

CB(
oo::class create ::constcl::InputPort {
  superclass ::constcl::Port
  variable handle
  method open {name} {
    try {
      set handle [open [$name value] "r"]
    } on error {} {
      set handle #NIL
      return -1
    }
    return $handle
  }
  method get {} {
    chan read $handle 1
  }
  method eof {} {
    chan eof $handle
  }
  method copy {} {
    ::constcl::InputPort new $handle
  }
  method write {p} {
    regexp {(\d+)} [self] -> num
    $p put "#<input-port-$num>"
  }
  method display {p} {
    my write $p
  }
}
CB)

H4 MkInputPort generator

MD(
K{MkInputPort} generates an InputPort object.
MD)

PR(
MkInputPort (internal);-> iport
PR)

CB(
interp alias {} ::constcl::MkInputPort \
  {} ::constcl::InputPort new
CB)

H4 StringInputPort class

CB(
oo::class create ::constcl::StringInputPort {
  superclass ::constcl::Port
  variable buffer read_eof
  constructor {str} {
    set buffer $str
    set read_eof 0
  }
  method open {name} {}
  method close {} {}
  method get {} {
    if {[::string length $buffer] == 0} {
      set read_eof 1
      return #EOF
    }
    set c [::string index $buffer 0]
    set buffer [::string range $buffer 1 end]
    return $c
  }
  method eof {} {
    if {$read_eof} {
      return 1
    } else {
      return 0
    }
  }
  method copy {} {
    ::constcl::StringInputPort new $buffer
  }
  method write {p} {
    regexp {(\d+)} [self] -> num
    $p put "#<string-input-port-$num>"
  }
  method display {p} {
    my write $p
  }
}
CB)

H4 OutputPort class

CB(
oo::class create ::constcl::OutputPort {
  superclass ::constcl::Port
  variable handle
  method open {name} {
    try {
      set handle [open [$name value] "w"]
    } on error {} {
      set handle #NIL
      return -1
    }
    return $handle
  }
  method put {c} {
    puts -nonewline $handle $c
  }
  method newline {} {
    puts $handle {}
  }
  method flush {} {
    flush $handle
  }
  method copy {} {
    ::constcl::OutputPort new $handle
  }
  method write {p} {
    regexp {(\d+)} [self] -> num
    $p put "#<output-port-$num>"
  }
  method display {p} {
    my write $p
  }
}
CB)

H4 MkOutputPort generator

MD(
K{MkOutputPort} generates an OutputPort object.
MD)

PR(
MkOutputPort (internal);-> oport
PR)

CB(
interp alias {} ::constcl::MkOutputPort \
  {} ::constcl::OutputPort new
CB)

H4 StringOutputPort class

CB(
oo::class create ::constcl::StringOutputPort {
  superclass ::constcl::Port
  variable buffer
  constructor {} {
    set buffer {}
  }
  method open {name} {}
  method close {} {}
  method put {s} {
    append buffer $s
  }
  method newline {} {
    append buffer \n
  }
  method flush {} {}
  method tostring {} {
    set buffer
  }
  method copy {} {
    ::constcl::StringOutputPort new $buffer
  }
  method write {p} {
    regexp {(\d+)} [self] -> num
    $p put "#<string-output-port-$num>"
  }
  method display {p} {
    my write $p
  }
}
CB)

MD(
B{Input_Port} variable

B{Output_port} variable

These two variables store globally the current configuration of the shared
input and output ports. They are initially set to standard input and output
respectively.
MD)

CB(
set ::constcl::Input_port [
  ::constcl::MkInputPort stdin]
set ::constcl::Output_port [
  ::constcl::MkOutputPort stdout]
CB)

H4 port? procedure

MD(
K{port?} recognizes Port objects, i.e. all kinds of ports.
MD)

CB(
reg port?

proc ::constcl::port? {val} {
  typeof? $val Port
}
CB)

H4 call-with-input-file procedure

MD(
K{call-with-input-file} opens a file for input and passes the port to K{proc}.
The file is closed again once K{proc} returns. The result of the call is
returned.
MD)

PR(
call-with-input-file (public);filename filename proc proc -> val
PR)

CB(
reg call-with-input-file

proc ::constcl::call-with-input-file {filename proc} {
  set port [open-input-file $filename]
  set res [invoke $proc [list $port]]
  close-input-port $port
  $port destroy
  return $res
}
CB)

TT(
::tcltest::test io-1.0 {try call-with-input-file} -setup {
  ::tcltest::makeFile {99 foo "bar"} iofile.txt
} -body {
  pe {(let ((f (lambda (port)  (let ((n 0) (s 0))
       (set! n (read port))
       (set! s (read port))
       (display s)
       (display n)))))
         (call-with-input-file "iofile.txt" f))}
} -cleanup {
  ::tcltest::removeFile iofile.txt
} -output "foo99"
TT)

H4 call-with-output-file procedure

MD(
K{call-with-output-file} opens a file for output and passes the port to K{proc}.
The file is closed again once K{proc} returns. The result of the call is
returned.

You can't use this procedure without deleting the first line. I take no
responsibility for damage to your files due to overwriting the contents.
MD)

PR(
call-with-output-file (public);filename filename proc proc -> val
PR)

CB(
reg call-with-output-file

proc ::constcl::call-with-output-file {filename proc} {
  ::error "remove this line to use"
  set port [open-output-file $filename]
  set res [invoke $proc [list $port]]
  close-output-port $port
  $port destroy
  return $res
}
CB)

TT(
::tcltest::test io-2.0 {try call-with-output-file} -setup {
} -body {
  pe {(let ((f (lambda (port)
       (display 'foo port)
       (display 99 port))))
         (call-with-output-file "iofile.txt" f))}
    puts [::tcltest::viewFile iofile.txt]
} -cleanup {
  ::tcltest::removeFile iofile.txt
} -returnCodes error -result "remove this line to use" 
#-output "foo99\n"
TT)

H4 input-port? procedure

MD(
K{input-port?} recognizes an InputPort object.
MD)

PR(
input-port? (public);val val -> bool
PR)

CB(
reg input-port?

proc ::constcl::input-port? {val} {
  if {[T typeof? $val InputPort]} {
    return #t
  } elseif {[T typeof? $val StringInputPort]} {
    return #t
  } else {
    return #f
  }
}
CB)

H4 output-port? procedure

MD(
K{output-port?} recognizes an OutputPort object.
MD)

PR(
output-port? (public);val val -> bool
PR)

CB(
reg output-port?

proc ::constcl::output-port? {val} {
  if {[T typeof? $val OutputPort]} {
    return #t
  } elseif {[T typeof? $val StringOutputPort]} {
    return #t
  } else {
    return #f
  }
}
CB)

H4 current-input-port procedure

MD(
K{current-input-port} makes a copy of the current shared input port.
MD)

PR(
current-input-port (public);-> port
PR)

CB(
reg current-input-port

proc ::constcl::current-input-port {} {
  return [$::constcl::Input_port copy]
}
CB)

H4 current-output-port procedure

MD(
K{current-output-port} makes a copy of the current shared output port.
MD)

PR(
current-output-port (public);-> port
PR)

CB(
reg current-output-port

proc ::constcl::current-output-port {} {
  return [$::constcl::Output_port copy]
}
CB)

H4 with-input-from-file procedure

MD(
K{with-input-from-file} opens a file for input and calls a 'thunk' while the
file is open.  The file is closed again when the call is done.
MD)

PR(
with-input-from-file (public);filename filename thunk proc -> none
PR)

CB(
reg with-input-from-file

proc ::constcl::with-input-from-file {filename thunk} {
  set newport [open-input-file $filename]
  if {[$newport handle] ne "#NIL"} {
    set oldport $::constcl::Input_port
    set ::constcl::Input_port $newport
    $thunk call
    set ::constcl::Input_port $oldport
    close-input-port $newport
  }
  $newport destroy
}
CB)

TT(
::tcltest::test io-3.0 {try with-input-from-file} -setup {
  ::tcltest::makeFile {42} foo.txt
} -body {
  pew "(with-input-from-file \"foo.txt\" (lambda () (write (read))))"
} -cleanup {
  ::tcltest::removeFile foo.txt
} -output "42\n"
TT)

H4 with-output-to-file procedure

MD(
K{with-output-to-file} opens a file for output and calls a 'thunk' while the
file is open.  The file is closed again when the call is done.
MD)

PR(
with-output-to-file (public);filename filename thunk proc -> none
PR)

CB(
reg with-output-to-file

proc ::constcl::with-output-to-file {filename thunk} {
  ::error "remove this line to use"
  set newport [open-output-file $filename]
  if {[$newport handle] ne "#NIL"} {
    set oldport $::constcl::Output_port
    set ::constcl::Output_port $newport
    $thunk call
    set ::constcl::Output_port $oldport
    close-input-port $newport
  }
  $newport destroy
}
CB)

TT(
::tcltest::test io-4.0 {try with-output-to-file} -setup {
} -body {
  pew "(with-output-to-file \"foo.txt\" (lambda () (write 42)))"
  puts [::tcltest::viewFile foo.txt]
} -cleanup {
  ::tcltest::removeFile foo.txt
} -returnCodes error -result "remove this line to use"
#-output "42\n"
TT)

H4 open-input-file procedure

MD(
K{open-input-file} opens a file for input and returns the port.
MD)

PR(
open-input-file (public);filename filename -> iport
PR)

CB(
reg open-input-file

proc cnof {} {return "could not open file"}
proc fae {} {return "file already exists"}

proc ::constcl::open-input-file {filename} {
  set p [MkInputPort]
  $p open $filename
  if {[$p handle] eq "#NIL"} {
    set fn [$filename value]
    error "open-input-file: [cnof] $fn"
  }
  return $p
}
CB)

H4 open-output-file procedure

MD(
K{open-output-file} opens a file for output and returns the port.
MD)

PR(
open-output-file (public);filename filename -> oport
PR)

CB(
reg open-output-file

proc ::constcl::open-output-file {filename} {
  ::error "remove this line to use"
  if {[file exists $filename]} {
    error "open-output-file: [fae] $filename"
  }
  set p [MkOutputPort]
  $p open $filename
  if {[$p handle] eq "#NIL"} {
    error "open-output-file: [cnof] $filename"
  }
  return $p
}
CB)

H4 close-input-port procedure

MD(
K{close-input-port} closes an input port.
MD)

PR(
close-input-port (public);port iport -> none
PR)

CB(
reg close-input-port

proc ::constcl::close-input-port {port} {
  if {[$port handle] eq "stdin"} {
    error "don't close the standard input port"
  }
  $port close
}
CB)

H4 close-output-port procedure

MD(
K{close-output-port} closes an output port.
MD)

PR(
close-output-port (public);port oport -> none
PR)

CB(
reg close-output-port

proc ::constcl::close-output-port {port} {
  if {[$port handle] eq "stdout"} {
    error "don't close the standard output port"
  }
  $port close
}
CB)

CB
proc ::constcl::read-char {args} {
    # TODO
}
CB

CB
proc ::constcl::peek-char {args} {
    # TODO
}
CB

CB
proc ::constcl::char-ready? {args} {
    # TODO
}
CB

MD(
K{write} is implemented in the R{output}{output} chapter.
MD)

MD(
K{display} is implemented in the output chapter.
MD)

H4 newline procedure

MD(
K{newline} outputs a newline character. Especially helpful when using K{display}
for output, since it doesn't end lines with newline.
MD)

PR(
newline (public);?port? oport -> none
PR)

CB(
reg newline

proc ::constcl::newline {args} {
  if {[llength $args]} {
    lassign $args port
  } else {
    set port [current-output-port]
  }
  pe "(display #\\newline '$port)"
}
CB)

TT(
::tcltest::test io-5.0 {try newline} -body {
  pe "(display \"foo\")"
  pe "(newline)"
  pe "(display \"bar\")"
} -output "foo\nbar"
TT)

CB
proc ::constcl::write-char {args} {
    # TODO
}
CB

MD(
B{load}

K{load} reads a Lisp source file and evals the expressions in it in the global
environment. The procedure is a ConsTcl mix of Scheme calls and Tcl syntax.
MD)

PR(
load (public);filename filename -> none
PR)

CB(
reg load

proc ::constcl::load {filename} {
  set p [open-input-file $filename]
  if {[$p handle] ne "#NIL"} {
    set n [read $p]
    while {$n ne "#EOF"} {
      eval $n
      set n [read $p]
    }
    close-input-port $p
  }
  $p destroy
}
CB)

CB
proc ::constcl::transcript-on {filename} {
    # TODO
}
CB

CB
proc ::constcl::transcript-off {} {
    # TODO
}
CB

# vim: ft=tcl tw=80 ts=2 sw=2 sts=2 et 
