package require tcltest
source constcl.tcl


::tcltest::test read-1.0 {try reading quoted symbol} -body {
    pp "'foo"
} -output "(quote foo)\n"

::tcltest::test read-1.1 {try reading a list} -body {
    namespace eval ::constcl {
        set ::inputstr "(a (b))"
        set obj [read]
        [caadr $obj] name
    }
} -result "b"

::tcltest::test read-1.2 {try reading a list} -body {
    pp "(a)"
} -output "(a)\n"

::tcltest::test read-1.3 {try reading a list} -body {
    pp "(a b)"
} -output "(a b)\n"

::tcltest::test read-1.4 {try reading a list} -body {
    pp "(a b c)"
} -output "(a b c)\n"

::tcltest::test read-1.5 {try reading a list} -body {
    pp "(a b c d)"
} -output "(a b c d)\n"

::tcltest::test read-1.6 {try reading a list} -body {
    pp "(a b c d e)"
} -output "(a b c d e)\n"

::tcltest::test read-1.7 {try reading a list} -body {
    pp "(a (b) )"
} -output "(a (b))\n"

::tcltest::test read-1.8 {try reading a list} -body {
    pp "(a (b))"
} -output "(a (b))\n"


::tcltest::test read-2.0 {try reading a number} {
    set ::inputstr "99.99"
    set obj [::constcl::read]
    $obj value
} "99.99"

::tcltest::test read-2.1 {try reading a number} {
    set ::inputstr "     99.99"
    set obj [::constcl::read]
    $obj value
} "99.99"

::tcltest::test read-2.2 {try reading a number} {
    set ::inputstr "     9"
    set obj [::constcl::read]
    $obj value
} "9"

::tcltest::test read-2.3 {try reading a number} {
    set ::inputstr "     +9"
    set obj [::constcl::read]
    $obj value
} "+9"

::tcltest::test read-2.4 {try reading a number} {
    set ::inputstr "     -9"
    set obj [::constcl::read]
    $obj value
} "-9"

::tcltest::test read-2.5 {try reading a number} {
    set ::inputstr "     - "
    set obj [::constcl::read]
    $obj name
} "-"

::tcltest::test read-2.6 {try reading a number} {
    set ::inputstr "     + "
    set obj [::constcl::read]
    $obj name
} "+"



::tcltest::test read-3.0 {try reading a character} {
    set ::inputstr {#\A}
    set obj [::constcl::read]
    $obj char
} "A"

::tcltest::test read-3.1 {try reading a character} {
    set ::inputstr "#\\space"
    set obj [::constcl::read]
    $obj char
} " "

::tcltest::test read-3.2 {try reading a character} {
    set ::inputstr "#\\newline"
    set obj [::constcl::read]
    $obj char
} "\n"

::tcltest::test read-3.3 {try reading a character} -body {
    set ::inputstr "#\\foobar"
    set obj [::constcl::read]
    $obj char
} -returnCodes error -result "Invalid character constant #\\foobar"



::tcltest::test read-4.0 {try reading a string} {
    set ::inputstr {"foo bar"}
    set obj [::constcl::read]
    $obj value
} "foo bar"

::tcltest::test read-4.1 {try reading a string} {
    set ::inputstr {"\"foo\" \\ bar"}
    set obj [::constcl::read]
    $obj value
} {"foo" \ bar}



::tcltest::test read-5.0 {try reading an identifier} {
    set ::inputstr "foo"
    set obj [::constcl::read]
    $obj name
} "foo"

::tcltest::test read-5.1 {try reading an identifier} -body {
    set ::inputstr "+foo"
    set obj [::constcl::read-identifier]
    $obj name
} -returnCodes error -result "Identifier expected (+foo)"

::tcltest::test read-5.2 {try reading an identifier} -body {
    set ::inputstr "let"
    set obj [::constcl::read]
    ::constcl::varcheck [$obj name]
} -returnCodes error -result "Macro name can't be used as a variable: let"



::tcltest::test write-1.0 {read, eval, and write a number} -body {
    pep "99.99"
} -output "99.99\n"

::tcltest::test write-1.1 {read, eval, and write a boolean} -body {
    pep "#t"
} -output "#t\n"

::tcltest::test write-1.2 {read, eval, and write a list} -body {
    pep "'(a b c)"
} -output "(a b c)\n"



::tcltest::test number-1.0 {try number?} -body {
    namespace eval ::constcl {
        set ::inputstr "(number? 99.99)"
        write [eval [read]]
    }
} -output "#t\n"



::tcltest::test number-1.1 {try =} -body {
    namespace eval ::constcl {
        set ::inputstr "(= 9 9 9 9)"
        write [eval [read]]
    }
} -output "#t\n"



::tcltest::test number-1.2 {try <} -body {
    namespace eval ::constcl {
        set ::inputstr "(< 1 2 4 7)"
        write [eval [read]]
    }
} -output "#t\n"



::tcltest::test number-1.3 {try >} -body {
    namespace eval ::constcl {
        set ::inputstr "(> 7 4 2 1)"
        write [eval [read]]
    }
} -output "#t\n"



::tcltest::test number-1.4 {try <=} -body {
    namespace eval ::constcl {
        set ::inputstr "(<= 1 4 4 7)"
        write [eval [read]]
    }
} -output "#t\n"



::tcltest::test number-1.5 {try >=} -body {
    namespace eval ::constcl {
        set ::inputstr "(>= 7 4 4 1)"
        write [eval [read]]
    }
} -output "#t\n"



::tcltest::test number-1.6 {try zero?} -body {
    namespace eval ::constcl {
        set ::inputstr "(zero? 77)"
        write [eval [read]]
    }
} -output "#f\n"



::tcltest::test number-1.7 {try positive?} -body {
    namespace eval ::constcl {
        set ::inputstr "(positive? 77)"
        write [eval [read]]
    }
} -output "#t\n"



::tcltest::test number-1.8 {try negative?} -body {
    namespace eval ::constcl {
        set ::inputstr "(negative? 77)"
        write [eval [read]]
    }
} -output "#f\n"



::tcltest::test number-1.9 {try even?} -body {
    namespace eval ::constcl {
        set ::inputstr "(even? 77)"
        write [eval [read]]
    }
} -output "#f\n"



::tcltest::test number-1.10 {try odd?} -body {
    namespace eval ::constcl {
        set ::inputstr "(odd? 77)"
        write [eval [read]]
    }
} -output "#t\n"



::tcltest::test number-1.11 {try max} -body {
    namespace eval ::constcl {
        set ::inputstr "(max 7 1 10 3)"
        write [eval [read]]
    }
} -output "10\n"



::tcltest::test number-1.12 {try min} -body {
    namespace eval ::constcl {
        set ::inputstr "(min 7 1 10 3)"
        write [eval [read]]
    }
} -output "1\n"



::tcltest::test number-1.12 {try +} -body {
    namespace eval ::constcl {
        set ::inputstr "(+ 7 1 10 3)"
        write [eval [read]]
    }
} -output "21\n"



::tcltest::test number-1.13 {try *} -body {
    namespace eval ::constcl {
        set ::inputstr "(* 7 1 10 3)"
        write [eval [read]]
    }
} -output "210\n"



::tcltest::test number-1.14 {try -} -body {
    namespace eval ::constcl {
        set ::inputstr "(- 7 1 10 3)"
        write [eval [read]]
    }
} -output "-7\n"



::tcltest::test number-1.15 {try /} -body {
    namespace eval ::constcl {
        set ::inputstr "(/ 60 1 10 3)"
        write [eval [read]]
    }
} -output "2\n"



::tcltest::test number-1.16 {try abs} -body {
    pep "(abs -99)"
} -output "99\n"



::tcltest::test number-1.17 {try floor} -body {
    pep "(floor 99.9)"
} -output "99.0\n"



::tcltest::test number-1.18 {try ceiling} -body {
    pep "(ceiling 99.9)"
} -output "100.0\n"



::tcltest::test number-1.19 {try truncate} -body {
    pep "(truncate 99.9)"
    pep "(truncate -99.9)"
} -output "99.0\n-99.0\n"



::tcltest::test number-1.20 {try round} -body {
    pep "(round 99.9)"
    pep "(round 99.3)"
} -output "100\n99\n"

::tcltest::test number-1.21 {try various} -body {
    pep "(floor 3.5)"
    pep "(ceiling 3.5)"
    pep "(truncate 3.5)"
    pep "(round 3.5)"
} -output "3.0\n4.0\n3.0\n4\n"



::tcltest::test number-1.22 {try exp} -body {
    pep "(exp 3)"
} -output "20.085536923187668\n"



::tcltest::test number-1.23 {try log} -body {
    pep "(log 3)"
} -output "1.0986122886681098\n"



::tcltest::test number-1.24 {try trig} -body {
    pep "(sin (/ pi 3))"
    pep "(cos (/ pi 3))"
    pep "(tan (/ pi 3))"
} -output "0.8660254037844386\n0.5000000000000001\n1.7320508075688767\n"



::tcltest::test number-1.25 {try trig} -body {
    pep "(asin 0.3)"
    pep "(acos 0.3)"
    pep "(atan 0.3)"
} -output "0.3046926540153975\n1.2661036727794992\n0.2914567944778671\n"



::tcltest::test number-1.25 {try sqrt} -body {
    pep "(sqrt 16)"
} -output "4.0\n"



::tcltest::test number-1.25 {try expt} -body {
    pep "(expt 4 2)"
} -output "16.0\n"



::tcltest::test number-1.26 {try number->string} -body {
    pep "(number->string 23)"
    pep "(number->string 23 2)"
    pep "(number->string 23 8)"
    pep "(number->string 23 16)"
} -output "\"23\"\n\"10111\"\n\"27\"\n\"17\"\n"



::tcltest::test number-1.27 {try string->number} -body {
    pep {(string->number "23")}
    pep {(string->number "10111" 2)}
    pep {(string->number "27" 8)}
    pep {(string->number "17" 16)}
} -output "23\n23\n23\n23\n"



::tcltest::test boolean-1.0 {evaluate boolean values} -body {
    namespace eval ::constcl {
        set ::inputstr "#t"
        write [eval [read]]
    }
} -output "#t\n"

::tcltest::test boolean-1.1 {evaluate boolean values} -body {
    namespace eval ::constcl {
        set ::inputstr "#f"
        write [eval [read]]
    }
} -output "#f\n"

::tcltest::test boolean-1.2 {evaluate boolean values} -body {
    namespace eval ::constcl {
        set ::inputstr "'#f"
        write [eval [read]]
    }
} -output "#f\n"



::tcltest::test boolean-2.0 {evaluate boolean values} -body {
    namespace eval ::constcl {
        set ::inputstr "(boolean? #f)"
        write [eval [read]]
    }
} -output "#t\n"

::tcltest::test boolean-2.1 {evaluate boolean values} -body {
    namespace eval ::constcl {
        set ::inputstr "(boolean? 0)"
        write [eval [read]]
    }
} -output "#f\n"

::tcltest::test boolean-2.2 {evaluate boolean values} -body {
    namespace eval ::constcl {
        set ::inputstr "(boolean? '())"
        write [eval [read]]
    }
} -output "#f\n"



::tcltest::test boolean-3.0 {not procedure} -body {
    namespace eval ::constcl {
        set ::inputstr "(not #t)"
        write [eval [read]]
    }
} -output "#f\n"

::tcltest::test boolean-3.1 {not procedure} -body {
    namespace eval ::constcl {
        set ::inputstr "(not 3)"
        write [eval [read]]
    }
} -output "#f\n"

::tcltest::test boolean-3.2 {not procedure} -body {
    namespace eval ::constcl {
        set ::inputstr "(not (list 3))"
        write [eval [read]]
    }
} -output "#f\n"

::tcltest::test boolean-3.3 {not procedure} -body {
    namespace eval ::constcl {
        set ::inputstr "(not #f)"
        write [eval [read]]
    }
} -output "#t\n"

::tcltest::test boolean-3.4 {not procedure} -body {
    namespace eval ::constcl {
        set ::inputstr "(not '())"
        write [eval [read]]
    }
} -output "#f\n"

::tcltest::test boolean-3.5 {not procedure} -body {
    namespace eval ::constcl {
        set ::inputstr "(not (list))"
        write [eval [read]]
    }
} -output "#f\n"

::tcltest::test boolean-3.6 {not procedure} -body {
    namespace eval ::constcl {
        set ::inputstr "(not 'nil)"
        write [eval [read]]
    }
} -output "#f\n"



::tcltest::test pairslists-1.0 {playing with lists} -body {
    pep {(define x (list 'a 'b 'c))}
    pep {(define y x)}
    pep {y}
} -output "()\n()\n(a b c)\n"

::tcltest::test pairslists-1.1 {playing with lists} -body {
    pep {(list? y)}
} -output "#t\n"

::tcltest::test pairslists-1.2 {playing with lists} -body {
    pep {(set-cdr! x 4)}
    pep {x}
} -output "4\n(a . 4)\n"

::tcltest::test pairslists-1.3 {playing with lists} -body {
    pep {(eqv? x y)}
    pep {y}
} -output "#t\n(a . 4)\n"

::tcltest::test pairslists-1.4 {playing with lists} -body {
    pep {(eqv? x y)}
    pep {y}
    pep {(list? y)}
} -output "#t\n(a . 4)\n#f\n"

::tcltest::test pairslists-1.5 {try pair?} -body {
    pep {(pair? '(a . b))}
    pep {(pair? '(a b c))}
    pep {(pair? '())}
} -output "#t\n#t\n#f\n"



::tcltest::test pairslists-1.6 {try cons} -body {
    pep {(cons 'a '())}
    pep {(cons '(a) '(b c d))}
    pep {(cons "a" '(b c))}
    pep {(cons 'a 3)}
    pep {(cons '(a b) 'c)}
} -output "(a)\n((a) b c d)\n(\"a\" b c)\n(a . 3)\n((a b) . c)\n"



::tcltest::test pairslists-1.7 {try car} -body {
    pep {(car '(a b c))}
    pep {(car '((a) b c d))}
    pep {(car '(1 . 2))}
} -output "a\n(a)\n1\n"

::tcltest::test pairslists-1.8 {try car} -body {
    pep {(car '())}
} -returnCodes error -result "PAIR expected"



::tcltest::test pairslists-1.9 {try cdr} -body {
    pep {(cdr '((a) b c d))}
    pep {(cdr '(1 . 2))}
} -output "(b c d)\n2\n"

::tcltest::test pairslists-1.10 {try cdr} -body {
    pep {(cdr '())}
} -returnCodes error -result "PAIR expected"



::tcltest::test pairslists-1.11 {try set-car!} -body {
    pep {(define f (lambda () (list 'not-a-constant-list)))}
    pep {(define g (lambda () '(constant-list)))}
    pep {(set-car! (f) 3)}
} -output "()\n()\n3\n"

::tcltest::test pairslists-1.12 {try set-car!} -body {
    pep {(set-car! (g) 3)}
} -returnCodes error -result "Can't modify a constant pair"



::tcltest::test pairslists-1.13 {try set-cdr!} -body {
    pep {(define f (lambda () (list 'not-a-constant-list)))}
    pep {(define g (lambda () '(constant-list)))}
    pep {(set-cdr! (f) 3)}
} -output "()\n()\n3\n"

::tcltest::test pairslists-1.14 {try set-cdr!} -body {
    pep {(set-cdr! (g) 3)}
} -returnCodes error -result "Can't modify a constant pair"



::tcltest::test pairslists-1.15 {try list?} -body {
    pep {(list? '(a b c))}
    pep {(list? '())}
    pep {(list? '(a . b))}
} -output "#t\n#t\n#f\n"

::tcltest::test pairslists-1.16 {try list?} -constraints knownBug -body {
    pep {(let ((x (list 'a)))
          (set-cdr! x x)
          (list? x))}
} -output "#f"



::tcltest::test pairslists-1.17 {try list} -body {
    pep {(list 'a (+ 3 4) 'c)}
    pep {(list)}
} -output "(a 7 c)\n()\n"



::tcltest::test pairslists-1.18 {try length} -body {
    pep {(length '(a b c))}
    pep {(length '(a (b) (c d e)))}
    pep {(length '())}
} -output "3\n3\n0\n"



::tcltest::test pairslists-1.19 {try append} -body {
    pep {(append '(x) '(y))}
    pep {(append '(a) '(b c d))}
    pep {(append '(a (b)) '((c)))}
    pep {(append '(a b) '(c . d))}
    pep {(append '() 'a)}
} -output "(x y)\n(a b c d)\n(a (b) (c))\n(a b c . d)\na\n"



::tcltest::test pairslists-1.20 {try reverse} -body {
    pep {(reverse '(a b c))}
    pep {(reverse '(a (b c) d (e (f))))}
} -output "(c b a)\n((e (f)) d (b c) a)\n"



::tcltest::test pairslists-1.21 {try list-tail} -body {
    pep {(list-tail '(a b c d) 2)}
} -output "(c d)\n"



::tcltest::test pairslists-1.22 {try list-ref} -body {
    pep {(list-ref '(a b c d) 2)}
} -output "c\n"



::tcltest::test pairslists-1.23 {try memq, memv} -body {
    pep {(memq 'a '(a b c))}
    pep {(memq 'b '(a b c))}
    pep {(memq 'a '(b c d))}
    pep {(memq (list 'a) '(b (a) c))}
    pep {(memq 101 '(100 101 102))}
    pep {(memv 101 '(100 101 102))}
} -output "(a b c)\n(b c)\n#f\n#f\n(101 102)\n(101 102)\n"

::tcltest::test pairslists-1.24 {try member} -body {
    pep {(member (list 'a) '(b (a) c))}
} -output "((a) c)\n"



::tcltest::test symbols-1.0 {try symbol?} -body {
    pep {(symbol? 'foo)}
    pep {(symbol? (car '(a b)))}
    pep {(symbol? "bar")}
    pep {(symbol? 'nil)}
    pep {(symbol? '())}
    pep {(symbol? #f)}
    puts [::constcl::symbol? #Q]
} -output "#t\n#t\n#f\n#t\n#f\n#f\n#t\n"



::tcltest::test symbols-1.1 {try symbol->string (and string->symbol)} -body {
    pep {(symbol->string 'flying-fish)}
    pep {(symbol->string 'Martin)}
    pep {(symbol->string (string->symbol "Malvina"))}
} -output {"flying-fish"
"martin"
"Malvina"
}

# hangs tkcon
::tcltest::test symbols-1.2 {try symbol->string} -constraints knownBug -body {
    pep {(string-set! (symbol->string 'flying-fish) 3 #\A}
} -returnCodes error -result ""



::tcltest::test characters-1.0 {try char?} -body {
    pep {(char? #\A)}
} -output "#t\n"



::tcltest::test characters-1.1 {try char=?} -body {
    pep {(char=? #\A #\A)}
    pep {(char=? #\A #\a)}
    pep {(char=? #\Space #\space)}
} -output "#t\n#f\n#t\n"



::tcltest::test characters-1.2 {try char<?} -body {
    pep {(char<? #\A #\A)}
    pep {(char<? #\A #\B)}
    pep {(char<? #\B #\A)}
} -output "#f\n#t\n#f\n"



::tcltest::test characters-1.3 {try char>?} -body {
    pep {(char>? #\A #\A)}
    pep {(char>? #\A #\B)}
    pep {(char>? #\B #\A)}
} -output "#f\n#f\n#t\n"



::tcltest::test characters-1.4 {try char<=?} -body {
    pep {(char<=? #\A #\A)}
    pep {(char<=? #\A #\B)}
    pep {(char<=? #\B #\A)}
} -output "#t\n#t\n#f\n"



::tcltest::test characters-1.5 {try char>=?} -body {
    pep {(char>=? #\A #\A)}
    pep {(char>=? #\A #\B)}
    pep {(char>=? #\B #\A)}
} -output "#t\n#f\n#t\n"



::tcltest::test characters-1.6 {try char-ci=?} -body {
    pep {(char-ci=? #\A #\a)}
    pep {(char-ci=? #\A #\b)}
    pep {(char-ci=? #\B #\a)}
} -output "#t\n#f\n#f\n"



::tcltest::test characters-1.7 {try char-ci<?} -body {
    pep {(char-ci<? #\A #\a)}
    pep {(char-ci<? #\A #\b)}
    pep {(char-ci<? #\B #\a)}
} -output "#f\n#t\n#f\n"



::tcltest::test characters-1.8 {try char-ci>?} -body {
    pep {(char-ci>? #\A #\a)}
    pep {(char-ci>? #\A #\b)}
    pep {(char-ci>? #\B #\a)}
} -output "#f\n#f\n#t\n"



::tcltest::test characters-1.9 {try char-ci<=?} -body {
    pep {(char-ci<=? #\A #\a)}
    pep {(char-ci<=? #\A #\b)}
    pep {(char-ci<=? #\B #\a)}
} -output "#t\n#t\n#f\n"



::tcltest::test characters-1.10 {try char-ci>=?} -body {
    pep {(char-ci>=? #\A #\a)}
    pep {(char-ci>=? #\A #\b)}
    pep {(char-ci>=? #\B #\a)}
    pep {(char-ci>=? #\A #\Space)}
} -output "#t\n#f\n#t\n#t\n"



::tcltest::test characters-1.11 {try char-alphabetic?} -body {
    pep {(char-alphabetic? #\A)}
    pep {(char-alphabetic? #\9)}
    pep {(char-alphabetic? #\space)}
    pep {(char-alphabetic? #\A)}
    pep {(char-alphabetic? #\a)}
    pep {(char-alphabetic? #\%)}
} -output "#t\n#f\n#f\n#t\n#t\n#f\n"



::tcltest::test characters-1.12 {try char-numeric?} -body {
    pep {(char-numeric? #\A)}
    pep {(char-numeric? #\9)}
    pep {(char-numeric? #\space)}
    pep {(char-numeric? #\A)}
    pep {(char-numeric? #\a)}
    pep {(char-numeric? #\%)}
} -output "#f\n#t\n#f\n#f\n#f\n#f\n"



::tcltest::test characters-1.13 {try char-whitespace?} -body {
    pep {(char-whitespace? #\A)}
    pep {(char-whitespace? #\9)}
    pep {(char-whitespace? #\space)}
    pep {(char-whitespace? #\A)}
    pep {(char-whitespace? #\a)}
    pep {(char-whitespace? #\%)}
} -output "#f\n#f\n#t\n#f\n#f\n#f\n"



::tcltest::test characters-1.14 {try char-upper-case?} -body {
    pep {(char-upper-case? #\A)}
    pep {(char-upper-case? #\9)}
    pep {(char-upper-case? #\space)}
    pep {(char-upper-case? #\A)}
    pep {(char-upper-case? #\a)}
    pep {(char-upper-case? #\%)}
} -output "#t\n#f\n#f\n#t\n#f\n#f\n"



::tcltest::test characters-1.15 {try char-lower-case?} -body {
    pep {(char-lower-case? #\A)}
    pep {(char-lower-case? #\9)}
    pep {(char-lower-case? #\space)}
    pep {(char-lower-case? #\A)}
    pep {(char-lower-case? #\a)}
    pep {(char-lower-case? #\%)}
} -output "#f\n#f\n#f\n#f\n#t\n#f\n"



::tcltest::test characters-1.16 {try char-upcase?} -body {
    pep {(char-upcase #\A)}
    pep {(char-upcase #\a)}
    pep {(char-upcase #\space)}
} -output "#\\A\n#\\A\n#\\space\n"



::tcltest::test characters-1.17 {try char-downcase?} -body {
    pep {(char-downcase #\A)}
    pep {(char-downcase #\a)}
    pep {(char-downcase #\space)}
} -output "#\\a\n#\\a\n#\\space\n"



::tcltest::test strings-1.0 {try string?} -body {
    pep {(string? "foo bar")}
    pep {(string? 'foo-bar)}
} -output "#t\n#f\n"



::tcltest::test strings-1.1 {try make-string} -body {
    pep {(make-string 5 #\x)}
} -output "\"xxxxx\"\n"



::tcltest::test strings-1.2 {try string} -body {
    pep {(string #\f #\o #\o)}
} -output "\"foo\"\n"



::tcltest::test strings-1.3 {try string-length} -body {
    pep {(string-length "foo bar")}
} -output "7\n"



::tcltest::test strings-1.4 {try string-ref} -body {
    pep {(string-ref "foo bar" 4)}
} -output "#\\b\n"



::tcltest::test strings-1.5 {try string-set!} -body {
    pep {(string-set! (string #\f #\o #\o) 0 #\x)}
} -output "\"xoo\"\n"

::tcltest::test strings-1.6 {try string-set!} -body {
    pep {(define f (lambda () (make-string 3 #\*)))}
    pep {(define g (lambda () "***"))}
    pep {(string-set! (f) 0 #\?)}
} -output "()\n()\n\"?**\"\n"

::tcltest::test strings-1.7 {try string-set!} -body {
    pep {(string-set! (g) 0 #\?)}
} -returnCodes error -result "string is constant"



::tcltest::test strings-1.8 {try string=?} -body {
    pep {(string=? "foo bar" "faa bor")}
    pep {(string=? "foo bar" "foo bar")}
    pep {(string=? "foo bar" "Foo bar")}
} -output "#f\n#t\n#f\n"



::tcltest::test strings-1.9 {try string-ci=?} -body {
    pep {(string-ci=? "foo bar" "faa bor")}
    pep {(string-ci=? "foo bar" "foo bar")}
    pep {(string-ci=? "foo bar" "Foo bar")}
} -output "#f\n#t\n#t\n"



::tcltest::test strings-1.10 {try string<?} -body {
    pep {(string<? "bar" "car")}
    pep {(string<? "bar" "bar")}
    pep {(string<? "bar" "aar")}
} -output "#t\n#f\n#f\n"



::tcltest::test strings-1.11 {try string-ci<?} -body {
    pep {(string-ci<? "bar" "Car")}
    pep {(string-ci<? "bar" "Bar")}
    pep {(string-ci<? "bar" "Aar")}
} -output "#t\n#f\n#f\n"



::tcltest::test strings-1.12 {try string>?} -body {
    pep {(string>? "bar" "car")}
    pep {(string>? "bar" "bar")}
    pep {(string>? "bar" "aar")}
} -output "#f\n#f\n#t\n"



::tcltest::test strings-1.13 {try string-ci>?} -body {
    pep {(string-ci>? "bar" "Car")}
    pep {(string-ci>? "bar" "Bar")}
    pep {(string-ci>? "bar" "Aar")}
} -output "#f\n#f\n#t\n"



::tcltest::test strings-1.14 {try string<=?} -body {
    pep {(string<=? "bar" "car")}
    pep {(string<=? "bar" "bar")}
    pep {(string<=? "bar" "aar")}
} -output "#t\n#t\n#f\n"



::tcltest::test strings-1.15 {try string-ci<=?} -body {
    pep {(string-ci<=? "bar" "Car")}
    pep {(string-ci<=? "bar" "Bar")}
    pep {(string-ci<=? "bar" "Aar")}
} -output "#t\n#t\n#f\n"



::tcltest::test strings-1.16 {try string>=?} -body {
    pep {(string>=? "bar" "car")}
    pep {(string>=? "bar" "bar")}
    pep {(string>=? "bar" "aar")}
} -output "#f\n#t\n#t\n"



::tcltest::test strings-1.17 {try string-ci>=?} -body {
    pep {(string-ci>=? "bar" "Car")}
    pep {(string-ci>=? "bar" "Bar")}
    pep {(string-ci>=? "bar" "Aar")}
} -output "#f\n#t\n#t\n"



::tcltest::test strings-1.18 {try substring} -body {
    pep {(substring "foo bar" 0 2)}
} -output "\"foo\"\n"



::tcltest::test strings-1.19 {try string-append} -body {
    pep {(string-append "foo" " bar")}
} -output "\"foo bar\"\n"



::tcltest::test strings-1.20 {try string->list} -body {
    pep {(string->list "foo")}
} -output "(#\\f #\\o #\\o)\n"



::tcltest::test strings-1.21 {try list->string} -body {
    pep {(list->string '(#\f #\o #\o))}
} -output "\"foo\"\n"



::tcltest::test strings-1.22 {try string-copy} -body {
    pep {(define x (string-copy "foo"))}
    pep {(string-set! x 0 #\x)}
} -output "()\n\"xoo\"\n"



::tcltest::test strings-1.23 {try string-fill!} -body {
    pep {(define x (string-copy "foo"))}
    pep {(string-fill! x #\x)}
} -output "()\n\"xxx\"\n"



::tcltest::test vectors-1.0 {try vector? (and make-vector, vector)} -body {
    pep {(vector? '#(0 (2 2 2 2) "Anna"))}
    pep {(vector? (make-vector 3 #\X))}
    pep {(vector? (vector 'a 'b 'c))}
} -output "#t\n#t\n#t\n"



::tcltest::test vectors-1.1 {try vector} -body {
    pep {(vector 'a 'b 'c)}
    pep {(vector 0 '(2 2 2 2) "Anna")}
} -output "#(a b c)\n#(0 (2 2 2 2) \"Anna\")\n"



::tcltest::test vectors-1.2 {try vector-length} -body {
    pep {(vector-length (vector 'a 'b 'c))}
} -output "3\n"



::tcltest::test vectors-1.3 {try vector-ref} -body {
    pep {(vector-ref (vector 'a 'b 'c) 1)}
} -output "b\n"



::tcltest::test vectors-1.4 {try vector-set!} -body {
    pep {(define x (lambda () (vector 0 '(2 2 2 2) "Anna")))}
    pep {(vector-set! (x) 1 '(foo bar))}
} -output "()\n#(0 (foo bar) \"Anna\")\n"



::tcltest::test eval-1.0 {try eval:ing an unbound symbol} -body {
    set ::inputstr "foo"
    ::constcl::eval [::constcl::read]
} -returnCodes error -result "Unbound variable: foo"


::tcltest::test global_env-1.0 {check for a symbol} -body {
    pep "pi"
} -output 3.1415926535897931\n

::tcltest::test global_env-2.0 {dereference an unbound symbol} -body {
    pep "foo"
} -returnCodes error -result "Unbound variable: foo"

::tcltest::test global_env-2.1 {dereference an unbound symbol: procedure} -body {
    pep "(foo)"
} -returnCodes error -result "Unbound variable: foo"


::tcltest::cleanupTests
