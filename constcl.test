package require tcltest
source constcl.tcl


::tcltest::test read-1.0 {try reading quoted symbol} -body {
    set ::inputstr "'foo"
    set obj [::constcl::read]
    ::constcl::write $obj
} -output "(quote foo)\n"

::tcltest::test read-1.1 {try reading a list} -body {
    namespace eval ::constcl {
        set ::inputstr "(a (b))"
        set obj [read]
        [caadr $obj] name
    }
} -result "b"

::tcltest::test read-1.2 {try reading a list} -body {
    namespace eval ::constcl {
        set ::inputstr "(a)"
        write [read]
    }
} -output "(a)\n"

::tcltest::test read-1.3 {try reading a list} -body {
    namespace eval ::constcl {
        set ::inputstr "(a b)"
        write [read]
    }
} -output "(a b)\n"

::tcltest::test read-1.4 {try reading a list} -body {
    namespace eval ::constcl {
        set ::inputstr "(a b c)"
        write [read]
    }
} -output "(a b c)\n"

::tcltest::test read-1.5 {try reading a list} -body {
    namespace eval ::constcl {
        set ::inputstr "(a b c d)"
        write [read]
    }
} -output "(a b c d)\n"

::tcltest::test read-1.6 {try reading a list} -body {
    namespace eval ::constcl {
        set ::inputstr "(a b c d e)"
        write [read]
    }
} -output "(a b c d e)\n"

::tcltest::test read-1.7 {try reading a list} -body {
    namespace eval ::constcl {
        set ::inputstr "(a (b) )"
        write [read]
    }
} -output "(a (b))\n"

::tcltest::test read-1.8 {try reading a list} -body {
    namespace eval ::constcl {
        set ::inputstr "(a (b))"
        write [read]
    }
} -output "(a (b))\n"


::tcltest::test read-2.0 {try reading a number} {
    set ::inputstr "99.99"
    set obj [::constcl::read]
    $obj value
} "99.99"

::tcltest::test read-2.1 {try reading a number} {
    set ::inputstr "     99.99"
    set obj [::constcl::read]
    $obj value
} "99.99"

::tcltest::test read-2.2 {try reading a number} {
    set ::inputstr "     9"
    set obj [::constcl::read]
    $obj value
} "9"

::tcltest::test read-2.3 {try reading a number} {
    set ::inputstr "     +9"
    set obj [::constcl::read]
    $obj value
} "+9"

::tcltest::test read-2.4 {try reading a number} {
    set ::inputstr "     -9"
    set obj [::constcl::read]
    $obj value
} "-9"

::tcltest::test read-2.5 {try reading a number} {
    set ::inputstr "     - "
    set obj [::constcl::read]
    $obj name
} "-"

::tcltest::test read-2.6 {try reading a number} {
    set ::inputstr "     + "
    set obj [::constcl::read]
    $obj name
} "+"



::tcltest::test read-3.0 {try reading a character} {
    set ::inputstr "#\\A"
    set obj [::constcl::read]
    $obj char
} "A"

::tcltest::test read-3.1 {try reading a character} {
    set ::inputstr "#\\space"
    set obj [::constcl::read]
    $obj char
} " "

::tcltest::test read-3.2 {try reading a character} {
    set ::inputstr "#\\newline"
    set obj [::constcl::read]
    $obj char
} "\n"

::tcltest::test read-3.3 {try reading a character} -body {
    set ::inputstr "#\\foobar"
    set obj [::constcl::read]
    $obj char
} -returnCodes error -result "Invalid character constant #\\foobar"



::tcltest::test read-4.0 {try reading a string} {
    set ::inputstr {"foo bar"}
    set obj [::constcl::read]
    $obj value
} "foo bar"

::tcltest::test read-4.1 {try reading a string} {
    set ::inputstr {"\"foo\" \\ bar"}
    set obj [::constcl::read]
    $obj value
} {\"foo\" \\ bar}



::tcltest::test read-5.0 {try reading an identifier} {
    set ::inputstr "foo"
    set obj [::constcl::read]
    $obj name
} "foo"

::tcltest::test read-5.1 {try reading an identifier} -body {
    set ::inputstr "+foo"
    set obj [::constcl::read-identifier]
    $obj name
} -returnCodes error -result "Identifier expected (+foo)"

::tcltest::test read-5.2 {try reading an identifier} -body {
    set ::inputstr "let"
    set obj [::constcl::read]
    $obj name
} -returnCodes error -result "Macro name can't be used as a variable: let"



::tcltest::test write-1.0 {read and write a number} -body {
    namespace eval ::constcl {
        set ::inputstr "99.99"
        write [eval [read]]
    }
} -output "99.99\n"

::tcltest::test write-1.1 {read and write a boolean} -body {
    namespace eval ::constcl {
        set ::inputstr "#t"
        write [eval [read]]
    }
} -output "#t\n"



::tcltest::test write-2.0 {read and write a list} -body {
    set ::inputstr "(a b c)"
    set obj [::constcl::read]
    ::constcl::write $obj
} -output "(a b c)\n"

::tcltest::test write-2.1 {read and write a list} -body {
    namespace eval ::constcl {
        set ::inputstr "'(a b c)"
        write [eval [read]]
    }
} -output "(a b c)\n"



::tcltest::test boolean-1.0 {evaluate boolean values} -body {
    namespace eval ::constcl {
        set ::inputstr "#t"
        write [eval [read]]
    }
} -output "#t\n"

::tcltest::test boolean-1.1 {evaluate boolean values} -body {
    namespace eval ::constcl {
        set ::inputstr "#f"
        write [eval [read]]
    }
} -output "#f\n"

::tcltest::test boolean-1.2 {evaluate boolean values} -body {
    namespace eval ::constcl {
        set ::inputstr "'#f"
        write [eval [read]]
    }
} -output "#f\n"



::tcltest::test boolean-2.0 {evaluate boolean values} -body {
    namespace eval ::constcl {
        set ::inputstr "(boolean? #f)"
        write [eval [read]]
    }
} -output "#t\n"



::tcltest::test boolean-3.0 {not procedure} -body {
    namespace eval ::constcl {
        set ::inputstr "(not #t)"
        write [eval [read]]
    }
} -output "#f\n"

::tcltest::test boolean-3.1 {not procedure} -body {
    namespace eval ::constcl {
        set ::inputstr "(not 3)"
        write [eval [read]]
    }
} -output "#f\n"

::tcltest::test boolean-3.2 {not procedure} -body {
    namespace eval ::constcl {
        set ::inputstr "(not (list 3))"
        write [eval [read]]
    }
} -output "#f\n"

::tcltest::test boolean-3.3 {not procedure} -body {
    namespace eval ::constcl {
        set ::inputstr "(not #f)"
        write [eval [read]]
    }
} -output "#t\n"

::tcltest::test boolean-3.4 {not procedure} -body {
    namespace eval ::constcl {
        set ::inputstr "(not '())"
        write [eval [read]]
    }
} -output "#f\n"

::tcltest::test boolean-3.5 {not procedure} -body {
    namespace eval ::constcl {
        set ::inputstr "(not (list))"
        write [eval [read]]
    }
} -output "#f\n"

::tcltest::test boolean-3.6 {not procedure} -body {
    namespace eval ::constcl {
        set ::inputstr "(not 'nil)"
        write [eval [read]]
    }
} -output "#f\n"



::tcltest::test eval-1.0 {try eval:ing an unbound symbol} -body {
    set ::inputstr "foo"
    ::constcl::eval [::constcl::read]
} -returnCodes error -result "Unbound variable: foo"


::tcltest::test global_env-1.0 {check for a symbol} {
    set inputstr "pi"
    set pi [::constcl::read]
    ::constcl::lookup $pi ::global_env
} 3.1415926535897931

::tcltest::test global_env-2.0 {dereference an unbound symbol} -body {
    pep "foo"
} -returnCodes error -result "Unbound variable: foo"

::tcltest::test global_env-2.1 {dereference an unbound symbol: procedure} -body {
    pep "(foo)"
} -returnCodes error -result "Unbound variable: foo"


::tcltest::cleanupTests
