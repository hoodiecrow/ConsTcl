
h2 Initial declarations

In this chapter, mostly things I need to start working on the interpreter. Feel
free to skim this chapter, maybe coming back later to check up on things here.

First, I need to create the namespace that will be used for most identifiers:

CB(
namespace eval ::constcl {}
CB)

h3 Utility commands

Next, some procedures that make my life as developer somewhat easier.

H4 reg procedure

K{reg} registers built-in procedures, special forms, and macros in the definitions
registerI{definitions register}. That way I don't need to manually keep track of
and list procedures. The definitions register's contents will eventually get
dumped into the R{standard library}{environment-startup}.

You can call K{reg} with one parameter: E{name}. E{name} is the string
that will eventually become the lookup symbol in the standard library. If you
give two parameters, the first one is the E{binding type}, either K{special} or K{macro}. The former
registers special forms like K{if} and K{define}, and the latter registers
macros like K{and} or K{when}.

There is also K{regvar}, which registers variables. You pass the E{name} and
E{value} to it. There are only a couple of variables registered this way.

K{reg} and K{regvar} start out by checking if the definitions register (K{defreg})
exists, and if not, they create it. Then they construct a E{val}(ue) by concatenating
a keyword (K{VARIABLE}, K{SPECIAL}, or K{SYNTAX}) with a variation on E{name}
(or, in K{regvar}'s case, E{value}).  Then they set an E{index number} based on
the current size of the K{defreg}. Finally they insert the
concatenation of E{name} and E{val} under E{index}.

PR(
reg (internal);?btype? specmacro name tstr -> none
PR)

PR(
regvar (internal);name tstr value val -> none
PR)

IX regvar procedure
CB(
unset -nocomplain ::constcl::defreg

proc reg {args} {
  if {[llength $args] == 2} {
    lassign $args btype name
  } elseif {[llength $args] == 1} {
    lassign $args name
    set btype {}
  } else {
    error "wrong number of parameters\n([pn])"
  }
  if {![info exists ::constcl::defreg]} {
    set ::constcl::defreg [dict create]
  }
  switch $btype {
    special {
      set val [::list SPECIAL ::constcl::special-$name]
    }
    macro {
      set val [::list SYNTAX ::constcl::expand-$name]
    }
    default {
      set val [::list VARIABLE ::constcl::$name]
    }
  }
  set idx [dict size $::constcl::defreg]
  dict set ::constcl::defreg $idx [::list $name $val]
}

proc regvar {name value} {
  if {![info exists ::constcl::defreg]} {
    set ::constcl::defreg [dict create]
  }
  set val [::list VARIABLE $value]
  set idx [dict size $::constcl::defreg]
  dict set ::constcl::defreg $idx [::list $name $val]
}
CB)

TT(
::tcltest::test initial-1.0 {try reg} -setup {
  set dr $::constcl::defreg
} -body {
  reg foo
  reg special bar
  reg macro baz
  puts [lrange $::constcl::defreg end-5 end]
} -cleanup {
  set ::constcl::defreg $dr
} -output "198 {foo {VARIABLE ::constcl::foo}} 199 {bar {SPECIAL ::constcl::special-bar}} 200 {baz {SYNTAX ::constcl::expand-baz}}\n"

::tcltest::test initial-1.1 {try regvar} -setup {
  set dr $::constcl::defreg
} -body {
  regvar foo bar
  puts [lrange $::constcl::defreg end-1 end]
} -cleanup {
  set ::constcl::defreg $dr
} -output "198 {foo {VARIABLE bar}}\n"
TT)

PT(
h5 Procedures, functions, and commands

I use all of these terms for the subroutines in ConsTcl. I try to stick to
procedure, because that's the standard term in R5RS. Still, they
  usually pass useful values back to the caller, so technically they're
  functions. Lastly, I'm programming in Tcl here, and the usual term for these
  things is `commands' in Tcl.

  And the `internal/public' distinction is possibly a misnomer (an aside within
  an aside, here). What it means is that `public' procedures can be called from
  Lisp code being interpreted, and the others cannot. They are for use in the
  infrastructure around the interpreter, including in implementing the `public'
  procedures. Another way to put it is that procedures registered by K{reg} are
  `public' and those who aren't are `internal'.

PT)

H4 atom? procedure

This one isn't just for my convenience: it's a standard procedure in Scheme.
There are two kinds of data in Lisp: listsI{lists} and atomsI{atoms}. Lists are
collections of lists and atoms. Atoms are instances of types such as booleans,
characters, numbers, ports, strings, symbols, and vectors. K{Atom?} recognizes
an atom by checking for membership in any one of the atomic types. It returns
K{#t} (true) if it is an atom, and K{#f} (false) if not.

PT(
h5 Predicates

By Scheme convention, predicates
(procedures that return either K{#t} or K{#f}) have '?' at the end of their
name. Some care is necessary when calling Scheme predicates from Tcl code (the
Tcl K{if} command expects 1 or 0 as truth values). Example:

KB if \{[atom? $x]\} ...

will not do, but 

KB if \{[atom? $x] ne "#f"\} ...

(``[atom? $x] not equal to false'') works. Or see the K{T} procedure.

PT)

PR(
atom? (public);val val -> bool
PR)

CB(
reg atom?

proc ::constcl::atom? {val} {
  foreach type {symbol number string
      char boolean vector port eof} {
    if {[$type? $val] eq "#t"} {
      return #t
    }
  }
  return #f
}
CB)

H4 T procedure

The K{T} procedure is intended to reduce the hassle of trying to make Lisp
booleans work with Tcl conditions. The idea is to line the Tcl condition with
K{[T ...]} and have the Lisp expression inside K{T}. K{T} returns 0 if and only
if the value passed to it is K{#f}, and 1 otherwise. The procedure's name stands
for `truth of'.

Example:

VB(
if {[T [atom? $x]]} ...
VB)

PR(
T (internal);val val -> tbool
PR)

CB(
proc ::T {val} {
  if {$val eq "#f"} {
    return 0
  } elseif {[::constcl::boolean? $val] eq "#t" &&
    [$val boolval] eq "#f"} {
    return 0
  } else {
    return 1
  }
}
CB)

H4 assert procedure

K{assert} signals an error if an assertion fails.

PR(
assert (internal);expr texp -> none
PR)

CB(
proc assert {expr} {
  if {![uplevel [list expr $expr]]} {
    error "Failed assertion [
      uplevel [list subst $expr]]"
  }
}
CB)

H4 pairlis-tcl procedure

A Tcl version of the procedure in the Scheme base.

PR(
pairlis-tcl (internal);lvals lvals -> lasss
PR)

CB(
proc ::constcl::pairlis-tcl {a b} {
  if {[T [null? $a]]} {
    parse {()}
  } else {
    cons \
      [cons [car $a] [car $b]] \
      [pairlis-tcl [cdr $a] [cdr $b]]
  }
}
CB)

H4 usage procedure

K{usage} is a simple procedure to compare a Lisp list (to wit: a Lisp
expression) with the expected format of the expression. Mostly it just compares
lengths.

PR(
usage (internal);usage expr expr expr -> none
PR)

CB(
proc ::constcl::usage {usage expr} {
  set u $usage
  set e $expr
  if {[[length $usage] numval] !=
      [[length $expr] numval]} {
    while {$u ne "#NIL" && $e ne "#NIL"} {
      set u [cdr $u]
      set e [cdr $e]
    }
    if {$e eq "#NIL" && $u ne "#NIL" &&
      [regexp {\?.*\?} [[car $u] name]]} {
      return
    }
    ::error "usage error\n[
      $usage show] not [$expr show]"
  }
}
CB)

H4 pn procedure

K{pn} stands for 'procedure name'. When called, tells the caller the name of its
command. I use it for error messages so the error message can automagically tell
the user which command failed.

PR(
pn (internal);-> tstr
PR)

CB(
proc ::pn {} {
  namespace tail [lindex [info level -1] 0]
}
CB)

H4 unbind procedure

K{unbind} removes bindings from the environment it is bound in.

PR(
unbind (internal);syms syms -> none
PR)

CB(
proc ::unbind {args} {
  # TODO go from current environment
  set syms $args
  foreach sym $syms {
    set env [::constcl::global_env find $sym]
    if {$env ne "::constcl::null_env"} {
      $env unbind $sym
    }
  }
}
CB)

H4 typeof? procedure

K{typeof?} looks at a value's type and reports if it is the same as the given
type. To be certain, it looks at the value in two ways: once assuming that the value
is a ConsTcl object, and once assuming that the value is an interpreterF{the Tcl
interpreter, not ConsTcl} alias for a ConsTcl object. If one of those affirms
the type, the procedure returns K{#t}.


PR(
typeof? (internal);val val type tstr -> bool
PR)

CB(
proc ::constcl::typeof? {val type} {
  if {[info object isa typeof $val $type]} {
    return #t
  } elseif {[info object isa typeof \
      [interp alias {} $val] $type]} {
    return #t
  } else {
    return #f
  }
}
CB)

H4 in-range procedure

This one is a little bit of both, a utility function that is also among the
builtins in the library (it's not standard, though). It started out as a
one-liner by Donal K. FellowsI{Fellows, Donal}, but has grown a bit since then
to suit my needs.

The plan is to arrange a sequence of numbers, given one, two or three ConsTcl
Number objects. If one is passed to the procedure, it is used as the end of the
sequence: the sequence will end just before it. If two numbers are passed, the
first one becomes the start of the sequence: the first number in it. The second
number will become the end of the sequence. If three numbers are passed, they
become start, end, and step, i.e. how much is added to the current number to
find next number in the sequence.

PR(
in-range (public);x num ?e? num ?t? num -> lnums
PR)

CB(
reg in-range

proc ::constcl::in-range {x args} {
  set start 0
  set step 1
  switch [llength $args] {
    0 {
      set e $x
      set end [$e numval]
    }
    1 {
      set s $x
      lassign $args e
      set start [$s numval]
      set end [$e numval]
    }
    2 {
      set s $x
      lassign $args e t
      set start [$s numval]
      set end [$e numval]
      set step [$t numval]
    }
  }
  set res $start
  while {$step > 0 && $end > [incr start $step] ||
      $step < 0 && $end < [incr start $step]} {
    lappend res $start
  }
  return [list {*}[lmap r $res {MkNumber $r}]]
}
CB)

H4 error procedure

K{error} is used to signal an error, with E{msg} being a message string and the
optional arguments being values to show after the message.

PR(
error (public);msg msg ?exprs? exprs -> dc
PR)

CB(
reg error

proc ::constcl::error {msg args} {
  if {[llength $args]} {
    set res [lmap arg $args {
      $arg show
    }]
    ::append msg " (" [join $res] ")"
  }
  ::error $msg
}
CB)

H4 check procedure

K{check} does a check (typically a type check) on something and throws an error if
it fails.

CB(
proc ::constcl::check {cond msg} {
  if {[uplevel $cond] eq "#f"} {
    ::error [
      uplevel [
        ::list subst [
          ::string trim $msg]]]
  }
}
CB)

H3 Testing commands

Testing gets easier if you have the software tools to manipulate and pick apart
the testing data and actions. Short names reduce clutter in the test cases, at
the cost of some readability.

H4 pew procedure

K{pew} was originally named K{pep} after the sequence parse-eval-print. Now it's
named for parse-eval-write. It reads and evals an expression, and writes the
result.  It's the most common command in the test cases, since it allows me to
write code directly in Scheme, get it evaled and get to see proper Lisp output
from it.

PR(
pew (internal);str tstrstrinpbuf ?env? env -> none
PR)

CB(
proc ::pew {str {env ::constcl::global_env}} {
  ::constcl::write [
    ::constcl::eval [
      ::constcl::parse $str] $env]
}
CB)

H4 rew procedure

K{rew} is the reading variant of K{pew}. Instead of taking string input it takes
a regular input port. It mattered more while the input library was being
written.

PR(
rew (internal);port iport ?env? env -> none
PR)

CB(
proc ::rew {port {env ::constcl::global_env}} {
  ::constcl::write [
    ::constcl::eval [
      ::constcl::read $port] $env]
}
CB)

H4 pw procedure

K{pw} is a similar command, except it doesn't eval the expression. It just
writes what is parsed. It is useful for tests when the evaluator can't (yet)
evaluate the form, but I can still check if it gets read and written correctly.

PR(
pw (internal);str tstrstrinpbuf -> none
PR)

CB(
proc ::pw {str} {
  ::constcl::write [
    ::constcl::parse $str]
}
CB)

H4 rw procedure

K{rw} is the reading variant of K{pw}. Instead of taking string input it takes a
regular input port. The procedure just writes what is read.

PR(
rw (internal);?port? iport -> none
PR)

CB(
proc ::rw {args} {
  ::constcl::write [
    ::constcl::read {*}$args]
}
CB)

H4 pe procedure

K{pe} is also similar, but it doesn't write the expression. It just evaluates what
is read. That way I get a value object which I can pass to another command, or
pick apart in different ways.

PR(
pe (internal);str tstrstrinpbuf ?env? env -> val
PR)

CB(
proc ::pe {str {env ::constcl::global_env}} {
  ::constcl::eval [
    ::constcl::parse $str] $env
}
CB)

H4 re procedure

K{re} is like K{pe}, but it reads from a regular port instead of an string input
port. It evaluates what is read.

PR(
re (internal);port iport ?env? env -> val
PR)

CB(
proc ::re {port {env ::constcl::global_env}} {
  ::constcl::eval [
    ::constcl::read $port] $env
}
CB)

H4 p procedure

K{p} only parses the input, returning an expression object.

PR(
p (internal);str tstrstrinpbuf -> expr
PR)

CB(
proc ::p {str} {
  ::constcl::parse $str
}
CB)

H4 e procedure

K{e} is another single-action procedure, evaluating an expression and returning a
value.

PR(
e (internal);expr expr ?env? env -> val
PR)

CB(
proc ::e {expr {env ::constcl::global_env}} {
  ::constcl::eval $expr $env
}
CB)

H4 w procedure

K{w} is the third single-action procedure, printing a value and that's all.

PR(
w (internal);val val -> none
PR)

CB(
proc ::w {val} {
  ::constcl::write $val
}
CB)

H4 r procedure

K{r} is an extra single-action procedure, reading from default input or from a
port and returning an expression object.

PR(
r (internal);?port? iport -> expr
PR)

CB(
proc ::r {args} {
  ::constcl::read {*}$args
}
CB)

H4 prw procedure

K{prw}  reads an expression, resolves defines, and writes the result. It was
handy during the time I was porting the `resolve local defines' section.

PR(
prw (internal);str tstrstrinpbuf -> none
PR)

CB(
proc ::prw {str} {
  set expr [::constcl::parse $str]
  set expr [::constcl::resolve-local-defines \
    [::constcl::cdr $expr]]
  ::constcl::write $expr
}
CB)

H4 pxw procedure

K{pxw} attempts to macro-expand whatever it reads, and writes the result. (I do
know that 'expand' doesn't start with an 'x'.) Again, this command's heyday was
when I was developing the macro facility.

PR(
pxw (internal);str tstrstrinpbuf ?env? env -> none
PR)

CB(
proc ::pxw {str {env ::constcl::global_env}} {
  set expr [::constcl::parse $str]
  set op [::constcl::car $expr]
  lassign [::constcl::binding-info $op $env] btype hinfo
  if {$btype eq "SYNTAX"} {
    set expr [$hinfo $expr $env]
    ::constcl::write $expr
  } else {
    puts "not a macro"
  }
}
CB)

h3 Some small classes

H4 Dot class

The K{Dot} class is a helper class for the parser.

CB(
catch { ::constcl::Dot destroy }

oo::class create ::constcl::Dot {
  method mkconstant {} {}
  method write {port} {
    $port put [my show]
  }
  method display {port} {
    my write $port
  }
  method show {} {
    format "."
  }
}
CB)

H4 dot? procedure

K{dot?} is a type predicate that checks for membership in the type K{Dot}.

PR(
dot? (internal);val val -> bool
PR)

CB(
proc ::constcl::dot? {val} {
  typeof? $val "Dot"
}
CB)

H4 EndOfFile class

The K{EndOfFile} class is for end-of-fileI{end of file} conditions.

CB(
catch { ::constcl::EndOfFile destroy }

oo::singleton create ::constcl::EndOfFile {
  method mkconstant {} {}
  method write {port} {
    $port put [my show]
  }
  method display {port} {
    my write $port
  }
  method show {} {
    format "#<end-of-file>"
  }
}
CB)

H4 eof? procedure

K{eof?} is a type predicate that recognizes the end-of-file object.

PR(
eof? (internal);val val -> bool
PR)

CB(
proc eof? {val} {
  if {$val eq "#EOF"} {
    return #t
  } else {
    return #f
  }
}
CB)

H4 NIL class

The K{NIL} class has one object: the empty list called K{#NIL}. It is also base
class for many other type classes.

CB(
catch { ::constcl::NIL destroy }

oo::singleton create ::constcl::NIL {
  method boolval {} {
    return #t
  }
  method car {} {
    ::error "PAIR expected"
  }
  method cdr {} {
    ::error "PAIR expected"
  }
  method set-car! {v} {
    ::error "PAIR expected"
  }
  method set-cdr! {v} {
    ::error "PAIR expected"
  }
  method numval {} {
    ::error "NUMBER expected"
  }
  method mkconstant {} {}
  method write {port} {
    $port put [my show]
  }
  method display {port} {
    my write $port
  }
  method show {} {
    format "()"
  }
}
CB)

H4 null? procedure

The K{null?} standard predicate recognizes the empty list.

PR(
null? (public);val val -> bool
PR)

CB(
reg null?

proc ::constcl::null? {val} {
  if {$val eq "#NIL"} {
    return #t
  } else {
    return #f
  }
}
CB)

H4 Undefined class

The K{Undefined} class is for undefined things. It was created to facilitate
porting of code from `Scheme 9 from Empty Space'I{S9fES}.

CB(
catch { ::constcl::Undefined destroy }

oo::singleton create ::constcl::Undefined {
  method mkconstant {} {}
  method write {port} {
    $port put [my show]
  }
  method display {port} {
    my write $port
  }
  method show {} {
    format "#<undefined>"
  }
}
CB)

H4 Unspecified class

The K{Unspecified} class is for unspecified things. Also a S9fES support class.

CB(
catch { ::constcl::Unspecified destroy }

oo::singleton create ::constcl::Unspecified {
  method mkconstant {} {}
  method write {port} {
    $port put [my show]
  }
  method display {port} {
    my write $port
  }
  method show {} {
    format "#<unspecified>"
  }
}
CB)

# vim: ft=tcl tw=80 ts=2 sw=2 sts=2 et 

