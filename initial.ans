
h2 Initial declarations

MD(
First, I need to create the namespace that will be used for most identifiers:
MD)

CB(
namespace eval ::constcl {}
CB)

h3 Utility commands

MD(
Next, some procedures that make my life as developer somewhat easier.
MD)

H4 reg procedure

MD(
K{reg} registers selected built-in procedures in the definitions
registerI{definitions register}. That way I don't need to manually keep track of
and list procedures. The definitions register's contents will eventually get
dumped into the R{standard library}{environment-startup}.

You can call K{reg} with one parameter: E{name}. E{name} is the string
that will eventually become the lookup symbol in the standard library. Following
K{reg} are two similar procedures: K{regspecial} and K{regmacro}. The former
registers special forms like K{if} and K{define}, and the latter registers
macros like K{and} or K{when}. FInally there is K{regvar}, which registers
variables.
MD)

PR(
reg, regspecial, regmacro (internal);name tstr -> none
PR)

PR(
regvar (internal);name tstr val val -> none
PR)

CB(
proc reg {name} {
  if {![info exists ::constcl::defreg]} {
    set ::constcl::defreg [dict create]
  }
  set val [::list VARIABLE ::constcl::$name]
  set idx [llength [dict values $::constcl::defreg]]
  dict set ::constcl::defreg $idx [::list $name $val]
}

proc regspecial {name} {
  if {![info exists ::constcl::defreg]} {
    set ::constcl::defreg [dict create]
  }
  set val [::list SPECIAL ::constcl::special-$name]
  set idx [llength [dict values $::constcl::defreg]]
  dict set ::constcl::defreg $idx [::list $name $val]
  return
}

proc regmacro {name} {
  if {![info exists ::constcl::defreg]} {
    set ::constcl::defreg [dict create]
  }
  set val [::list SYNTAX ::constcl::expand-$name]
  set idx [llength [dict values $::constcl::defreg]]
  dict set ::constcl::defreg $idx [::list $name $val]
  return
}

proc regvar {name value} {
  if {![info exists ::constcl::defreg]} {
    set ::constcl::defreg [dict create]
  }
  set val [::list VARIABLE $value]
  set idx [llength [dict values $::constcl::defreg]]
  dict set ::constcl::defreg $idx [::list $name $val]
}
CB)

h5 Procedures, functions, and commands: an aside

MD(
I use all of these terms for the subroutines in ConsTcl. I try to stick to
procedure, because that's the standard term in R5RSF{Revised5 Report on the
  Algorithmic Language Scheme, Scheme's standardization document}. Still, they
  usually pass useful values back to the caller, so technically they're
  functions. Lastly, I'm programming in Tcl here, and the usual term for these
  things is `commands' in Tcl.

  And the `internal/public' distinction is probably a misnomer (an aside within
  an aside, here). What it means is that `public' procedures can be called from
  Lisp code being interpreted, and the others cannot. They are for use in the
  infrastructure around the interpreter, including in implementing the `public'
  procedures. Another way to put it is that procedures registered by K{reg} are
  `public' and those who aren't are `internal'.
MD)

H4 atom? procedure

MD(
THis one isn't just for my convenience: it's a standard procedure in Scheme.
There are two kinds of data in Lisp: listsI{lists} and atomsI{atoms}. Lists are
collections of lists and atoms. Atoms are instances of types such as booleans,
characters, numbers, ports, strings, symbols, and vectors. K{Atom?} recognizes
an atom by checking for membership in any one of the atomic types. It returns
K{#t} (truth) if it is an atom, and K{#f} (falsehood) if not.

h5 Predicates: an aside

By Scheme convention, W{predicates}{Boolean-valued_function}I{predicate}
(procedures that return either K{#t} or K{#f}) have '?' at the end of their
name. Some care is necessary when calling Scheme predicates from Tcl code (the
Tcl K{if} command expects 1 or 0 as truth values). Example:

KB if \{[atom? $x]\} D{}

will not do, but 

KB if \{[atom? $x] ne "#f"\} D{}

(``[atom? $x] not equal to false'') works. Or see next procedure.
MD)

PR(
atom? (public);val val -> bool
PR)

CB(
reg atom?

proc ::constcl::atom? {val} {
  foreach type {symbol number string
      char boolean vector port eof} {
    if {[$type? $val] eq "#t"} {
      return #t
    }
  }
  return #f
}
CB)

H4 T procedure

MD(
The K{T} procedure is intended to reduce the hassle of trying to make Lisp
booleans work with Tcl conditions. The idea is to line the Tcl condition with
K{[T ...]} and have the Lisp expression inside K{T}. K{T} returns 0 if and only
if the value passed to it is K{#f}, and 1 otherwise. The procedure's name stands
for `truth'.

Example:
MD)

VB(
if {[T [atom? $x]]} ...
VB)

PR(
T (internal);val val -> tbool
PR)

CB(
proc ::T {val} {
  if {$val eq "#f"} {
    return 0
  } elseif {[::constcl::boolean? $val] eq "#t" &&
    [$val boolval] eq "#f"} {
    return 0
  } else {
    return 1
  }
}
CB)

H4 assert procedure

MD(
K{assert} signals an error if an assertion fails.
MD)

PR(
assert (internal);expr texpr -> none
PR)

CB(
proc assert {expr} {
  if {![uplevel [list expr $expr]]} {
    error "Failed assertion [
      uplevel [list subst $expr]]"
  }
}
CB)

H4 pairlis-tcl procedure

MD(
A Tcl version of the procedure in the Scheme base.
MD)

PR(
pairlis-tcl (internal);lvals lvals -> lasss
PR)

CB(
proc ::constcl::pairlis-tcl {a b} {
  if {[T [null? $a]]} {
    parse {()}
  } else {
    cons \
      [cons [car $a] [car $b]] \
      [pairlis-tcl [cdr $a] [cdr $b]]
  }
}
CB)

H4 usage procedure

MD(
K{usage} is a simple procedure to compare a Lisp list (to wit: a Lisp
expression) with the expected format of the expression. Mostly it just compares
lengths.
MD)

PR(
usage (internal);usage expr expr expr-> none
PR)

CB(
proc ::constcl::usage {usage expr} {
  set u $usage
  set e $expr
  if {[[length $usage] numval] !=
      [[length $expr] numval]} {
    while {$u ne "#NIL" && $e ne "#NIL"} {
      set u [cdr $u]
      set e [cdr $e]
    }
    if {$e eq "#NIL" && $u ne "#NIL" &&
      [regexp {\?.*\?} [[car $u] name]]} {
      return
    }
    ::error "usage error\n[
      $usage show] not [$expr show]"
  }
}
CB)

H4 pn procedure

MD(
K{pn} stands for 'procedure name'. When called, tells the caller the name of its
command. I use it for error messages so the error message can automagically tell
the user which command failed.
MD)

PR(
pn (internal);-> tstr
PR)

CB(
proc ::pn {} {
  lindex [split [lindex [info level -1] 0] :] end
}
CB)

H4 unbind procedure

MD(
K{unbind} removes one binding from the environment it is bound in.
MD)

PR(
unbind (internal);sym sym -> none
PR)

CB(
proc ::unbind {sym} {
  # TODO go from current environment
  set env [::constcl::global_env find $sym]
  if {$env ne "::constcl::null_env"} {
    $env unbind $sym
  }
}
CB)

H4 typeof? procedure

MD(
K{typeof?} looks at a value's type and reports if it is the same as the given
type. To be certain, it looks at the value in two ways: once assuming that the value
is a ConsTcl object, and once assuming that the value is an interpreterF{the Tcl
interpreter, not ConsTcl} alias for a ConsTcl object. If one of those affirms
the type, the procedure returns K{#t}.

MD)

PR(
typeof? (internal);val val type tstr -> bool
PR)

CB(
proc ::constcl::typeof? {val type} {
  if {[info object isa typeof $val $type]} {
    return #t
  } elseif {[info object isa typeof \
      [interp alias {} $val] $type]} {
    return #t
  } else {
    return #f
  }
}
CB)

H4 in-range procedure

MD(
This one is a little bit of both, a utility function that is also among the
builtins in the library (it's not standard, though). It started out as a
one-liner by Donal K. FellowsI{Fellows, Donal}, but has grown a bit since then
to suit my needs.

The plan is to arrange a sequence of numbers, given one, two or three ConsTcl
Number objects. If one is passed to the procedure, it is used as the end of the
sequence: the sequence will end just before it. If two numbers are passed, the
first one becomes the start of the sequence: the first number in it. The second
number will become the end of the sequence. If three numbers are passed, they
become start, end, and step, i.e. how much is added to the current number to
find next number in the sequence.
MD)

PR(
in-range (public);x num ?e? num ?t? num -> lnums
PR)

CB(
reg in-range

proc ::constcl::in-range {x args} {
  set start 0
  set step 1
  switch [llength $args] {
    0 {
      set e $x
      set end [$e numval]
    }
    1 {
      set s $x
      lassign $args e
      set start [$s numval]
      set end [$e numval]
    }
    2 {
      set s $x
      lassign $args e t
      set start [$s numval]
      set end [$e numval]
      set step [$t numval]
    }
  }
  set res $start
  while {$step > 0 && $end > [incr start $step] ||
      $step < 0 && $end < [incr start $step]} {
    lappend res $start
  }
  return [list {*}[lmap r $res {MkNumber $r}]]
}
CB)

H4 error procedure

MD(
K{error} is used to signal an error, with E{msg} being a message string and the
optional arguments being values to show after the message.
MD)

PR(
error (public);msg msg ?exprs? exprs -> dc
PR)

CB(
reg error

proc ::constcl::error {msg args} {
  if {[llength $args]} {
    lappend msg "("
    set times 0
    foreach arg $args {
      if {$times} {
        ::append msg " "
      }
      ::append msg [$arg show]
      incr times
    }
    lappend msg ")"
  }
  ::error $msg
}
CB)

H4 check procedure

MD(
K{check} does a check (typically a type check) on something and throws an error if
it fails.
MD)

CB(
proc ::constcl::check {cond msg} {
  if {[uplevel $cond] eq "#f"} {
    ::error [
      uplevel [
        ::list subst [
          ::string trim $msg]]]
  }
}
CB)

H3 Testing commands

Testing gets easier if you have the software tools to manipulate and pick apart
the testing data and actions. Short names reduce clutter in the test cases, at
the cost of some readability.

H4 pew procedure

MD(
K{pew} was originally named K{pep} after the sequence parse-eval-print. Now it's
named for parse-eval-write. It reads and evals an expression, and writes the
result.  It's the most common command in the test cases, since it allows me to
write code directly in Scheme, get it evaled and get to see proper Lisp output
from it.
MD)

PR(
pew (internal);str tstrstrinpbuf -> none
PR)

CB(
proc ::pew {str} {
  ::constcl::write [
    ::constcl::eval [
      ::constcl::parse $str]]
}
CB)

H4 pw procedure

MD(
K{pw} is a similar command, except it doesn't eval the expression. It just
writes what is parsed. It is useful for tests when the evaluator can't (yet)
evaluate the form, but I can still check if it gets read and written correctly.
MD)

PR(
pw (internal);str tstrstrinpbuf -> none
PR)

CB(
proc ::pw {str} {
  ::constcl::write [
    ::constcl::parse $str]
}
CB)

H4 rw procedure

MD(
K{rw} is the reading variant of K{pw}. Instead of taking string input it takes a
regular input port. The distinction mattered more while the input library
was being written. The procedure just writes what is read.
MD)

PR(
rw (internal);?port? iport -> none
PR)

CB(
proc ::rw {args} {
  ::constcl::write [
    ::constcl::read {*}$args]
}
CB)

H4 pe procedure

MD(
K{pe} is also similar, but it doesn't write the expression. It just evaluates what
is read. That way I get a value object which I can pass to another command, or
pick apart in different ways.
MD)

PR(
pe (internal);str tstrstrinpbuf -> val
PR)

CB(
proc ::pe {str} {
  ::constcl::eval [
    ::constcl::parse $str]
}
CB)

H4 re procedure

MD(
K{re} is like K{pe}, but it reads from a regular port instead of an string input
port. It evaluates what is read.
MD)

PR(
re (internal);?port? -> val
PR)

CB(
proc ::re {args} {
  ::constcl::eval [
    ::constcl::read {*}$args]
}
CB)

H4 p procedure

MD(
K{p} only parses the input, returning an expression object.
MD)

PR(
p (internal);str tstrstrinpbuf -> expr
PR)

CB(
proc ::p {str} {
  ::constcl::parse $str
}
CB)

H4 e procedure

MD(
K{e} is another single-action procedure, evaluating an expression and returning a
value.
MD)

PR(
e (internal);expr expr -> val
PR)

CB(
proc ::e {expr} {
  ::constcl::eval $expr
}
CB)

H4 w procedure

MD(
K{w} is the third single-action procedure, printing a value and that's all.
MD)

PR(
w (internal);val val -> none
PR)

CB(
proc ::w {val} {
  ::constcl::write $val
}
CB)

H4 r procedure

MD(
K{r} is an extra single-action procedure, reading from default input or from a
port and returning an expression object.
MD)

PR(
r (internal);?port? iport -> expr
PR)

CB(
proc ::r {args} {
  ::constcl::read {*}$args
}
CB)

H4 prw procedure

MD(
K{prw}  reads an expression, resolves defines, and writes the result. It was
handy during the time I was porting the `resolve local defines' section.
MD)

PR(
prw (internal);str tstrstrinpbuf -> none
PR)

CB(
proc ::prw {str} {
  set expr [::constcl::parse $str]
  set expr [::constcl::resolve-local-defines \
    [::constcl::cdr $expr]]
  ::constcl::write $expr
}
CB)

H4 pxw procedure

MD(
K{pxw} attempts to macro-expand whatever it reads, and writes the result. I know
that 'expand' doesn't start with an 'x'. Again, this command's heyday was when I
was developing the macro facility.
MD)

PR(
pxw (internal);str tstrstrinpbuf -> none
PR)

CB(
proc ::pxw {str} {
  set expr [::constcl::parse $str]
  set expr [::constcl::expand-macro $expr \
    ::constcl::global_env]
  ::constcl::write $expr
}
CB)

h3 Some small classes

H4 Dot class

MD(
The K{Dot} class is a helper class for the parser.
MD)

CB(
catch { ::constcl::Dot destroy }

oo::class create ::constcl::Dot {
  method mkconstant {} {}
  method write {handle} {
    puts -nonewline $handle "."
  }
  method display {handle} {
    my write $handle
  }
}
CB)

H4 dot? procedure

MD(
K{dot?} is a type predicate that checks for membership in the type K{Dot}.
MD)

PR(
dot? (internal);val val -> bool
PR)

CB(
proc ::constcl::dot? {val} {
  typeof? $val "Dot"
}
CB)

H4 EndOfFile class

MD(
The K{EndOfFile} class is for end-of-fileI{end of file} conditions.
MD)

CB(
catch { ::constcl::EndOfFile destroy }

oo::singleton create ::constcl::EndOfFile {
  method mkconstant {} {}
  method write {handle} {
    puts -nonewline $handle "#<end-of-file>"
  }
  method display {handle} {
    my write $handle
  }
}
CB)

H4 eof? procedure

MD(
K{eof?} is a type predicate that recognizes the end-of-file object.
MD)

PR(
eof? (internal);val val -> bool
PR)

CB(
proc eof? {val} {
  if {$val eq "#EOF"} {
    return #t
  } else {
    return #f
  }
}
CB)

H4 NIL class

MD(
The K{NIL} class has one object: the empty list called K{#NIL}. It is also base
class for many other type classes.
MD)

CB(
catch { ::constcl::NIL destroy }

oo::singleton create ::constcl::NIL {
  method boolval {} {
    return #t
  }
  method car {} {
    ::error "PAIR expected"
  }
  method cdr {} {
    ::error "PAIR expected"
  }
  method set-car! {v} {
    ::error "PAIR expected"
  }
  method set-cdr! {v} {
    ::error "PAIR expected"
  }
  method numval {} {
    ::error "NUMBER expected"
  }
  method write {handle} {
    puts -nonewline $handle "()"
  }
  method display {handle} {
    my write $handle
  }
  method show {} {
    format "()"
  }
}
CB)

H4 null? procedure

MD(
The K{null?} standard predicate recognizes the empty list.
MD)

PR(
null? (public);val val -> bool
PR)

CB(
reg null?

proc ::constcl::null? {val} {
  if {$val eq "#NIL"} {
    return #t
  } else {
    return #f
  }
}
CB)

H4 Undefined class

MD(
The K{Undefined} class is for undefined things. It was created to facilitate
porting of code from `Scheme 9 from Empty Space'I{S9fES}.
MD)

CB(
catch { ::constcl::Undefined destroy }

oo::class create ::constcl::Undefined {
  method mkconstant {} {}
  method write {handle} {
    puts -nonewline $handle "#<undefined>"
  }
  method display {handle} {
    my write $handle
  }
}
CB)

H4 Unspecified class

MD(
The K{Unspecified} class is for unspecified things. Also a S9fES support class.
MD)

CB(
catch { ::constcl::Unspecified destroy }

oo::class create ::constcl::Unspecified {
  method mkconstant {} {}
  method write {handle} {
    puts -nonewline $handle "#<unspecified>"
  }
  method display {handle} {
    my write $handle
  }
}
CB)

# vim: ft=tcl tw=80 ts=2 sw=2 sts=2 et 

