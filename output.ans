
H2 Output

H4 write procedure

MD(
The third thing an interpreter must be able to do is to present the resulting
code and data so that the user can know what the outcome of the evaluation was.

As long as the object given to K{write} isn't the empty string, it calls the
object's K{write} method and writes a newline.
MD)

PR(
write (public);val val ?port? port -> none
PR)

CB(
reg write ::constcl::write

proc ::constcl::write {val args} {
  if {$val ne ""} {
    if {[llength $args]} {
      lassign $args port
      set dealloc 0
    } else {
      set port [MkOutputPort stdout]
      set dealloc 1
    }
    set ::constcl::Output_port $port
    $val write [$::constcl::Output_port handle]
    puts [$::constcl::Output_port handle] {}
    set ::constcl::Output_port [MkOutputPort stdout]
    if {$dealloc} {$port destroy}
  }
  return
}
CB)

H4 display procedure

MD(
The K{display} procedure is like K{write} but it calls the method's K{display}
method and doesn't print a newline.
MD)

PR(
display (public);val val ?port? port -> none
PR)

CB(
reg display ::constcl::display

proc ::constcl::display {val args} {
  if {$val ne ""} {
    if {[llength $args]} {
      lassign $args port
      set dealloc 0
    } else {
      set port [MkOutputPort stdout]
      set dealloc 1
    }
    set ::constcl::Output_port $port
    $val display [$::constcl::Output_port handle]
    flush [$::constcl::Output_port handle]
    set ::constcl::Output_port [MkOutputPort stdout]
    if {$dealloc} {$port destroy}
  }
  return
}
CB)

H4 write-pair procedure

MD(
The K{write-pair} procedure prints a Pair object.
MD)

PR(
write-pair (internal);handle handle pair pair -> none
PR)

CB(
proc ::constcl::write-pair {handle pair} {
  # take an object and print the car
  # and the cdr of the stored value
  set a [car $pair]
  set d [cdr $pair]
  # print car
  $a write $handle
  if {[T [pair? $d]]} {
    # cdr is a cons pair
    puts -nonewline $handle " "
    write-pair $handle $d
  } elseif {[T [null? $d]]} {
    # cdr is nil
    return
  } else {
    # it is an atom
    puts -nonewline $handle " . "
    $d write $handle
  }
  return
}
CB)

TT(

::tcltest::test write-1.0 {read, eval, and write a number} -body {
    pew "99.99"
} -output "99.99\n"

::tcltest::test write-1.1 {read, eval, and write a boolean} -body {
    pew "#t"
} -output "#t\n"

::tcltest::test write-1.2 {read, eval, and write a list} -body {
    pew "'(a b c)"
} -output "(a b c)\n"

TT)

# vim: ft=tcl tw=80 ts=2 sw=2 sts=2 et 
