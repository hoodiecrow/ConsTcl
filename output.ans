
H2 Output

MD(
The third thing an interpreter must be able to do is to present the resulting
code and data so that the user can know what the outcome of the evaluation was.

H4 write procedure

As long as the object given to K{write} isn't the empty string, it calls the
object's K{write} method and writes a newline.
MD)

PR(
write (public);val val ?port? port -> none
PR)

CB(
reg write

proc ::constcl::write {val args} {
  if {$val ne ""} {
    set oldport $::constcl::Output_port
    if {[llength $args]} {
      lassign $args port
      set ::constcl::Output_port $port
    }
    $val write $::constcl::Output_port
    $::constcl::Output_port newline
    set ::constcl::Output_port $oldport
  }
  return
}
CB)

H4 display procedure

MD(
The K{display} procedure is like K{write} but it calls the object's K{display}
method and doesn't print a newline afterwards.
MD)

PR(
display (public);val val ?port? port -> none
PR)

CB(
reg display

proc ::constcl::display {val args} {
  if {$val ne ""} {
    set oldport $::constcl::Output_port
    if {[llength $args]} {
      lassign $args port
      set ::constcl::Output_port $port
    }
    $val display $::constcl::Output_port
    $::constcl::Output_port flush
    set ::constcl::Output_port $oldport
  }
  return
}
CB)

H4 write-pair procedure

MD(
The K{write-pair} procedure prints a Pair object except for the beginning and
ending parentheses.
MD)

PR(
write-pair (internal);port oport pair pair -> none
PR)

CB(
proc ::constcl::write-pair {port pair} {
  # take an object and print the car
  # and the cdr of the stored value
  set a [car $pair]
  set d [cdr $pair]
  # print car
  $a write $port
  if {[T [pair? $d]]} {
    # cdr is a cons pair
    $port put " "
    write-pair $port $d
  } elseif {[T [null? $d]]} {
    # cdr is nil
    return
  } else {
    # it is an atom
    $port put " . "
    $d write $port
  }
  return
}
CB)

TT(

::tcltest::test write-1.0 {read, eval, and write a number} -body {
    pew "99.99"
} -output "99.99\n"

::tcltest::test write-1.1 {read, eval, and write a boolean} -body {
    pew "#t"
} -output "#t\n"

::tcltest::test write-1.2 {read, eval, and write a list} -body {
    pew "'(a b c)"
} -output "(a b c)\n"

::tcltest::test write-1.3 {read, eval, and write a list} -body {
    pew "'(a b (c))"
} -output "(a b (c))\n"

TT)

# vim: ft=tcl tw=80 ts=2 sw=2 sts=2 et 
