
H3 Characters

Characters are any Unicode graphic character, and also space and newline space
characters. External representation is K{#\A} (A stands for any character) or
K{#\space} or K{#\newline}.

H4 Char class

The Char class defines what capabilities a character has (in addition to those
from the Base class), and also defines the internal representation of a character
value expression. A character is stored in an instance as a Tcl character, and
the K{char} method yields the character as result.

CB(
oo::class create ::constcl::Char {
  superclass ::constcl::Base
  variable value
CB)

The constructor tests its argument against the three basic forms of external
representation for characters, and stores the corresponding Tcl character.

PR(
Char constructor (internal);v echar -> none
PR)

CB(
  constructor {v} {
    switch -regexp $v {
      {(?i)#\\space} {
        set v " "
      }
      {(?i)#\\newline} {
        set v "\n"
      }
      {#\\[[:graph:]]} {
        set v [::string index $v 2]
      }
    }
    set value $v
  }
CB)

The K{char} method yields the stored character value.

PR(
(Char instance) char (internal);-> tchr
PR)

CB(
  method char {} {
    set value
  }
CB)

The K{alphabetic?} method is a predicate which tests if the stored value is an
alphabetic character.

PR(
(Char instance) alphabetic? (internal);-> bool
PR)

CB(
  method alphabetic? {} {
    if {[::string is alpha $value]} {
      return ${::#t}
    } else {
      return ${::#f}
    }
  }
CB)

The K{numeric?} method is a predicate which tests if the stored value is a
numeric character.

PR(
(Char instance) numeric? (internal);-> bool
PR)

CB(
  method numeric? {} {
    if {[::string is digit $value]} {
      return ${::#t}
    } else {
      return ${::#f}
    }
  }
CB)

The K{whitespace?} method is a predicate which tests if the stored value is a
whitespace character.

PR(
(Char instance) whitespace? (internal);-> bool
PR)

CB(
  method whitespace? {} {
    if {[::string is space $value]} {
      return ${::#t}
    } else {
      return ${::#f}
    }
  }
CB)

The K{upper-case?} method is a predicate which tests if the stored value is an
uppercase character.

PR(
(Char instance) upper-case? (internal);-> bool
PR)

CB(
  method upper-case? {} {
    if {[::string is upper $value]} {
      return ${::#t}
    } else {
      return ${::#f}
    }
  }
CB)

The K{lower-case?} method is a predicate which tests if the stored value is an
lowercase character.

PR(
(Char instance) lower-case? (internal);-> bool
PR)

CB(
  method lower-case? {} {
    if {[::string is lower $value]} {
      return ${::#t}
    } else {
      return ${::#f}
    }
  }
CB)

The K{constant} method signals that the character instance isn't mutable.

PR(
(Char instance) constant (internal);-> tbooltrue
PR)

CB(
  method constant {} {
    return 1
  }
CB)

The K{value} method is another way to yield the stored value

PR(
(Char instance) value (internal);-> tchr
PR)

CB(
  method value {} {
    return $value
  }
CB)

The K{external} method translates the stored value back to external
representation.

PR(
(Char instance) external (internal);-> echar
PR)

CB(
  method external {} {
    switch $value {
      " " {
        return "#\\space"
      }
      "\n" {
        return "#\\newline"
      }
      default {
        return "#\\$value"
      }
    }
  }
CB)

The K{display} method is used by the K{display} standard procedure to print the
stored value as a character.

PR(
(Char instance) display (internal);port oport -> none
PR)

CB(
  method display {port} {
    $port put [my char]
  }
CB)

The K{tstr} method yields the external representation of the stored value as a
Tcl string. It is used by error messages and the K{write} method.

PR(
(Char instance) tstr (internal);-> echar
PR)

CB(
  method tstr {} {
    return [my external]
  }
}
CB)

H4 MkChar generator

K{MkChar} generates a character object. If a character object with the same name
already exists, that character will be returned, otherwise a fresh character
will be created.

PR(
MkChar (internal);char echar -> char
PR)

CB(
proc ::constcl::MkChar {char} {
  if {[regexp -nocase {space|newline} $char]} {
      set char [::string tolower $char]
  }
  foreach instance [
    info class instances Char] {
    if {[$instance external] eq $char} {
      return $instance
    }
  }
  return [::constcl::Char new $char]
}
CB)

H4 char? procedure

K{char?} recognizes Char values by type.

PR(
char? (public);val val -> bool
PR)

CB(
reg char?

proc ::constcl::char? {val} {
  return [typeof? $val Char]
}
CB)

TT(

::tcltest::test characters-1.0 {try char?} -body {
    pew {(char? #\A)}
} -output "#t\n"

TT)

H4 char=? procedure

NI B{char<?} procedure

NI B{char>?} procedure

NI B{char<=?} procedure

NI B{char>=?} procedure

K{char=?}, K{char<?}, K{char>?}, K{char<=?}, and K{char>=?} compare character
values. They only compare two characters at a time.

PR(
char=?, char<?, char>?, char<=?, char>=? (public);char1 char char2 char -> bool
PR)

CB(
reg char=?

proc ::constcl::char=? {char1 char2} {
  check {char? $char1} {
    CHAR expected\n([pn] [$char1 tstr] [$char2 tstr])
  }
  check {char? $char2} {
    CHAR expected\n([pn] [$char1 tstr] [$char2 tstr])
  }
  if {[$char1 char] eq [$char2 char]} {
    return ${::#t}
  } else {
    return ${::#f}
  }
}
CB)

TT(

::tcltest::test characters-1.1 {try char=?} -body {
    pew {(char=? #\A #\A)}
    pew {(char=? #\A #\a)}
    pew {(char=? #\Space #\space)}
} -output "#t\n#f\n#t\n"

::tcltest::test characters-check-1.0 {try triggering a check} -body {
    pew {(char=? 99 #\A)}
} -returnCodes error -result "CHAR expected\n(char=? 99 #\\A)"

TT)

IX char<? procedure
CB(
reg char<?

proc ::constcl::char<? {char1 char2} {
  check {char? $char1} {
    CHAR expected\n([pn] [$char1 tstr] [$char2 tstr])
  }
  check {char? $char2} {
    CHAR expected\n([pn] [$char1 tstr] [$char2 tstr])
  }
  if {[$char1 char] < [$char2 char]} {
    return ${::#t}
  } else {
    return ${::#f}
  }
}
CB)

TT(

::tcltest::test characters-1.2 {try char<?} -body {
    pew {(char<? #\A #\A)}
    pew {(char<? #\A #\B)}
    pew {(char<? #\B #\A)}
} -output "#f\n#t\n#f\n"

TT)

IX char>? procedure
CB(
reg char>?

proc ::constcl::char>? {char1 char2} {
  check {char? $char1} {
    CHAR expected\n([pn] [$char1 tstr] [$char2 tstr])
  }
  check {char? $char2} {
    CHAR expected\n([pn] [$char1 tstr] [$char2 tstr])
  }
  if {[$char1 char] > [$char2 char]} {
    return ${::#t}
  } else {
    return ${::#f}
  }
}
CB)

TT(

::tcltest::test characters-1.3 {try char>?} -body {
    pew {(char>? #\A #\A)}
    pew {(char>? #\A #\B)}
    pew {(char>? #\B #\A)}
} -output "#f\n#f\n#t\n"

TT)

IX char<=? procedure
CB(
reg char<=?

proc ::constcl::char<=? {char1 char2} {
  check {char? $char1} {
    CHAR expected\n([pn] [$char1 tstr] [$char2 tstr])
  }
  check {char? $char2} {
    CHAR expected\n([pn] [$char1 tstr] [$char2 tstr])
  }
  if {[$char1 char] <= [$char2 char]} {
    return ${::#t}
  } else {
    return ${::#f}
  }
}
CB)

TT(

::tcltest::test characters-1.4 {try char<=?} -body {
    pew {(char<=? #\A #\A)}
    pew {(char<=? #\A #\B)}
    pew {(char<=? #\B #\A)}
} -output "#t\n#t\n#f\n"

TT)

IX char>=? procedure
CB(
reg char>=?

proc ::constcl::char>=? {char1 char2} {
  check {char? $char1} {
    CHAR expected\n([pn] [$char1 tstr] [$char2 tstr])
  }
  check {char? $char2} {
    CHAR expected\n([pn] [$char1 tstr] [$char2 tstr])
  }
  if {[$char1 char] >= [$char2 char]} {
    return ${::#t}
  } else {
    return ${::#f}
  }
}
CB)

TT(

::tcltest::test characters-1.5 {try char>=?} -body {
    pew {(char>=? #\A #\A)}
    pew {(char>=? #\A #\B)}
    pew {(char>=? #\B #\A)}
} -output "#t\n#f\n#t\n"

TT)

H4 char-ci=? procedure

NI B{char-ci<?} procedure

NI B{char-ci>?} procedure

NI B{char-ci<=?} procedure

NI B{char-ci>=?} procedure

K{char-ci=?}, K{char-ci<?}, K{char-ci>?}, K{char-ci<=?}, and K{char-ci>=?} compare character
values in a case insensitive manner. They only compare two characters at a time.

PR(
char-ci=?, char-ci<?, char-ci>?, char-ci<=?, char-ci>=? (public);char1 char char2 char -> bool
PR)

CB(
reg char-ci=?

proc ::constcl::char-ci=? {char1 char2} {
  check {char? $char1} {
    CHAR expected\n([pn] [$char1 tstr] [$char2 tstr])
  }
  check {char? $char2} {
    CHAR expected\n([pn] [$char1 tstr] [$char2 tstr])
  }
  if {[::string tolower [$char1 char]] eq
      [::string tolower [$char2 char]]} {
    return ${::#t}
  } else {
    return ${::#f}
  }
}
CB)

TT(

::tcltest::test characters-1.6 {try char-ci=?} -body {
    pew {(char-ci=? #\A #\a)}
    pew {(char-ci=? #\A #\b)}
    pew {(char-ci=? #\B #\a)}
} -output "#t\n#f\n#f\n"

TT)

IX char-ci<? procedure
CB(
reg char-ci<?

proc ::constcl::char-ci<? {char1 char2} {
  check {char? $char1} {
    CHAR expected\n([pn] [$char1 tstr] [$char2 tstr])
  }
  check {char? $char2} {
    CHAR expected\n([pn] [$char1 tstr] [$char2 tstr])
  }
  if {[::string tolower [$char1 char]] <
      [::string tolower [$char2 char]]} {
    return ${::#t}
  } else {
    return ${::#f}
  }
}
CB)

TT(

::tcltest::test characters-1.7 {try char-ci<?} -body {
    pew {(char-ci<? #\A #\a)}
    pew {(char-ci<? #\A #\b)}
    pew {(char-ci<? #\B #\a)}
} -output "#f\n#t\n#f\n"

TT)

IX char-ci>? procedure
CB(
reg char-ci>?

proc ::constcl::char-ci>? {char1 char2} {
  check {char? $char1} {
    CHAR expected\n([pn] [$char1 tstr] [$char2 tstr])
  }
  check {char? $char2} {
    CHAR expected\n([pn] [$char1 tstr] [$char2 tstr])
  }
  if {[::string tolower [$char1 char]] >
      [::string tolower [$char2 char]]} {
    return ${::#t}
  } else {
    return ${::#f}
  }
}
CB)

TT(

::tcltest::test characters-1.8 {try char-ci>?} -body {
    pew {(char-ci>? #\A #\a)}
    pew {(char-ci>? #\A #\b)}
    pew {(char-ci>? #\B #\a)}
} -output "#f\n#f\n#t\n"

TT)

IX char-ci<=? procedure
CB(
reg char-ci<=?

proc ::constcl::char-ci<=? {char1 char2} {
  check {char? $char1} {
    CHAR expected\n([pn] [$char1 tstr] [$char2 tstr])
  }
  check {char? $char2} {
    CHAR expected\n([pn] [$char1 tstr] [$char2 tstr])
  }
  if {[::string tolower [$char1 char]] <=
      [::string tolower [$char2 char]]} {
    return ${::#t}
  } else {
    return ${::#f}
  }
}
CB)

TT(

::tcltest::test characters-1.9 {try char-ci<=?} -body {
    pew {(char-ci<=? #\A #\a)}
    pew {(char-ci<=? #\A #\b)}
    pew {(char-ci<=? #\B #\a)}
} -output "#t\n#t\n#f\n"

TT)

IX char-ci>=? procedure
CB(
reg char-ci>=?

proc ::constcl::char-ci>=? {char1 char2} {
  check {char? $char1} {
    CHAR expected\n([pn] [$char1 tstr] [$char2 tstr])
  }
  check {char? $char2} {
    CHAR expected\n([pn] [$char1 tstr] [$char2 tstr])
  }
  if {[::string tolower [$char1 char]] >=
      [::string tolower [$char2 char]]} {
    return ${::#t}
  } else {
    return ${::#f}
  }
}
CB)

TT(

::tcltest::test characters-1.10 {try char-ci>=?} -body {
    pew {(char-ci>=? #\A #\a)}
    pew {(char-ci>=? #\A #\b)}
    pew {(char-ci>=? #\B #\a)}
    pew {(char-ci>=? #\A #\Space)}
} -output "#t\n#f\n#t\n#t\n"

TT)

H4 char-alphabetic? procedure

NI B{char-numeric?} procedure

NI B{char-whitespace?} procedure

NI B{char-upper-case?} procedure

NI B{char-lower-case?} procedure

The predicates K{char-alphabetic?}, K{char-numeric?}, and K{char-whitespace?}
 test a character for these
conditions.
K{char-upper-case?} and K{char-lower-case?} too.

PR(
char-alphabetic?, char-numeric?, char-whitespace? (public);char char -> bool
PR)

PR(
char-upper-case?, char-lower-case? (public);char char -> bool
PR)

CB(
reg char-alphabetic?

proc ::constcl::char-alphabetic? {char} {
  check {char? $char} {
    CHAR expected\n([pn] [$char tstr])
  }
  return [$char alphabetic?]
}
CB)

TT(

::tcltest::test characters-1.11 {try char-alphabetic?} -body {
    pew {(char-alphabetic? #\A)}
    pew {(char-alphabetic? #\9)}
    pew {(char-alphabetic? #\space)}
    pew {(char-alphabetic? #\A)}
    pew {(char-alphabetic? #\a)}
    pew {(char-alphabetic? #\%)}
} -output "#t\n#f\n#f\n#t\n#t\n#f\n"

TT)

IX char-numeric? procedure
CB(
reg char-numeric?

proc ::constcl::char-numeric? {char} {
  check {char? $char} {
    CHAR expected\n([pn] [$char tstr])
  }
  return [$char numeric?]
}
CB)

TT(

::tcltest::test characters-1.12 {try char-numeric?} -body {
    pew {(char-numeric? #\A)}
    pew {(char-numeric? #\9)}
    pew {(char-numeric? #\space)}
    pew {(char-numeric? #\A)}
    pew {(char-numeric? #\a)}
    pew {(char-numeric? #\%)}
} -output "#f\n#t\n#f\n#f\n#f\n#f\n"

TT)

IX char-whitespace? procedure
CB(
reg char-whitespace?

proc ::constcl::char-whitespace? {char} {
  check {char? $char} {
    CHAR expected\n([pn] [$char tstr])
  }
  return [$char whitespace?]
}
CB)

TT(

::tcltest::test characters-1.13 {try char-whitespace?} -body {
    pew {(char-whitespace? #\A)}
    pew {(char-whitespace? #\9)}
    pew {(char-whitespace? #\space)}
    pew {(char-whitespace? #\A)}
    pew {(char-whitespace? #\a)}
    pew {(char-whitespace? #\%)}
} -output "#f\n#f\n#t\n#f\n#f\n#f\n"

TT)

IX char-upper-case? procedure
CB(
reg char-upper-case?

proc ::constcl::char-upper-case? {char} {
  check {char? $char} {
    CHAR expected\n([pn] [$char tstr])
  }
  return [$char upper-case?]
}
CB)

TT(

::tcltest::test characters-1.14 {try char-upper-case?} -body {
    pew {(char-upper-case? #\A)}
    pew {(char-upper-case? #\9)}
    pew {(char-upper-case? #\space)}
    pew {(char-upper-case? #\A)}
    pew {(char-upper-case? #\a)}
    pew {(char-upper-case? #\%)}
} -output "#t\n#f\n#f\n#t\n#f\n#f\n"

TT)

IX char-lower-case? procedure
CB(
reg char-lower-case?

proc ::constcl::char-lower-case? {char} {
  check {char? $char} {
    CHAR expected\n([pn] [$char tstr])
  }
  return [$char lower-case?]
}
CB)

TT(

::tcltest::test characters-1.15 {try char-lower-case?} -body {
    pew {(char-lower-case? #\A)}
    pew {(char-lower-case? #\9)}
    pew {(char-lower-case? #\space)}
    pew {(char-lower-case? #\A)}
    pew {(char-lower-case? #\a)}
    pew {(char-lower-case? #\%)}
} -output "#f\n#f\n#f\n#f\n#t\n#f\n"

TT)

H4 char->integer procedure

K{char->integer} and K{integer->char} convert between characters and their
16-bit numeric codes.

Example:

VB(
(char->integer #\A)   =>  65
VB)

PR(
char->integer (public);char char -> int
PR)

CB(
reg char->integer

proc ::constcl::char->integer {char} {
  return [MkNumber [scan [$char char] %c]]
}
CB)

H4 integer->char procedure

Example:

VB(
(integer->char 97)   =>  #\a
VB)

PR(
integer->char (public);int int -> char
PR)

CB(
reg integer->char

proc ::constcl::integer->char {int} {
  if {$int == 10} {
    return [MkChar #\\newline]
  } elseif {$int == 32} {
    return [MkChar #\\space]
  } else {
    return [MkChar #\\[format %c [$int numval]]]
  }
}
CB)

TT(

::tcltest::test characters-1.16 {try char-upcase?} -body {
    pew {(char->integer #\A)}
    pew {(integer->char 97)}
} -output "65\n#\\a\n"

TT)

H4 char-upcase procedure

B{char-downcase} procedure

K{char-upcase} and K{char-downcase} alter the case of a character.

PR(
char-upcase, char-downcase (public);char char -> char
PR)

CB(
reg char-upcase

proc ::constcl::char-upcase {char} {
  check {char? $char} {
    CHAR expected\n([pn] [$char tstr])
  }
  if {[$char char] in [::list " " "\n"]} {
    return $char
  } else {
    return [MkChar [
      ::string toupper [$char external]]]
  }
}
CB)

TT(

::tcltest::test characters-1.17 {try char-upcase} -body {
    pew {(char-upcase #\A)}
    pew {(char-upcase #\a)}
    pew {(char-upcase #\space)}
} -output "#\\A\n#\\A\n#\\space\n"

TT)


IX char-downcase procedure
CB(
reg char-downcase

proc ::constcl::char-downcase {char} {
  check {char? $char} {
    CHAR expected\n([pn] [$char tstr])
  }
  if {[$char char] in [::list " " "\n"]} {
    return $char
  } else {
    return [MkChar [
      ::string tolower [$char external]]]
  }
}
CB)

TT(

::tcltest::test characters-1.18 {try char-downcase?} -body {
    pew {(char-downcase #\A)}
    pew {(char-downcase #\a)}
    pew {(char-downcase #\space)}
} -output "#\\a\n#\\a\n#\\space\n"

TT)

# vim: ft=tcl tw=80 ts=2 sw=2 sts=2 et 
