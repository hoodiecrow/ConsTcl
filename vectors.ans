
H3 Vectors

MD(
Vectors are heterogenous structures of fixed length whose elements are indexed
by integers.

The number of elements that a vector contains (the E{length}) is set when the
vector is created.  Elements can be indexed by integers from zero to length
minus one.
MD)

H4 Vector class

CB(
oo::class create ::constcl::Vector {
  superclass ::constcl::NIL
  variable data constant
  constructor {v} {
    if {[T [::constcl::list? $v]]} {
      set len [[::constcl::length $v] numval]
      set vsa [::constcl::vsAlloc $len]
      set idx $vsa
      while {[::constcl::null? $v] ne "#t"} {
        set elt [::constcl::car $v]
        lset ::constcl::vectorSpace $idx $elt
        incr idx
        set v [::constcl::cdr $v]
      }
    } else {
      set len [llength $v]
      set vsa [::constcl::vsAlloc $len]
      set idx $vsa
      foreach elt $v {
        lset ::constcl::vectorSpace $idx $elt
        incr idx
      }
    }
    set data [::constcl::cons [N $vsa] [N $len]]
    set constant 0
  }
  method baseadr {} {
    ::constcl::car $data
  }
  method length {} {
    ::constcl::cdr $data
  }
  method ref {k} {
    set k [$k numval]
    if {$k < 0 || $k >= [[my length] numval]} {
      ::error "index out of range\n$k"
    }
    lindex [my store] $k
  }
  method store {} {
    set base [[my baseadr] numval]
    set end [expr {[[my length] numval] +
      $base - 1}]
    lrange $::constcl::vectorSpace $base $end
  }
  method value {} {
    my store
  }
  method set! {k obj} {
    if {[my constant]} {
      ::error "vector is constant"
    } else {
      set k [$k numval]
      if {$k < 0 || $k >= [[my length] numval]} {
        ::error "index out of range\n$k"
      }
      set base [[my baseadr] numval]
      lset ::constcl::vectorSpace $k+$base $obj
    }
    return [self]
  }
  method fill! {val} {
    if {[my constant]} {
      ::error "vector is constant"
    } else {
      set base [[my baseadr] numval]
      set len [[my length] numval]
      for {set idx $base} \
        {$idx < $len+$base} \
        {incr idx} {
        lset ::constcl::vectorSpace $idx $val
      }
    }
    return [self]
  }
  method mkconstant {} {
    set constant 1
  }
  method constant {} {
    set constant
  }
  method write {handle} {
    puts -nonewline $handle [my show]
  }
  method display {handle} {
    my write $handle
  }
  method show {} {
    format "#(%s)" [
      join [lmap val [my value] {$val show}]]
  }
}
CB)

H4 MkVector generator

MD(
K{MkVector} generates a Vector object.
MD)

PR(
MkVector (internal);vals tvals -> vec
PR)

CB(
interp alias {} ::constcl::MkVector \
  {} ::constcl::Vector new
CB)

MD(
B{vector?}
MD)

PR(
vector? (public);val val -> bool
PR)

CB(
reg vector? ::constcl::vector?

proc ::constcl::vector? {val} {
  typeof? $val Vector
}
CB)

TT(

::tcltest::test vectors-1.0 {try vector? (and make-vector, vector)} -body {
    pew {(vector? #(0 (2 2 2 2) "Anna"))}
    pew {(vector? (make-vector 3 #\X))}
    pew {(vector? (vector 'a 'b 'c))}
} -output "#t\n#t\n#t\n"

TT)

H4 make-vector procedure

MD(
K{make-vector} creates a vector with a given length and optionally a fill value.
If a fill value isn't given, the empty list will be used.
MD)

MD(
Example:
MD)

VB(
(let ((k 3))
  (make-vector k))        =>  #(() () ())
(let ((k 3) (val #\A))
  (make-vector k val))    =>  #(#\A #\A #\A)
VB)

PR(
make-vector? (public);k num ?val? val -> vec
PR)

CB(
reg make-vector ::constcl::make-vector

proc ::constcl::make-vector {k args} {
  if {[llength $args] == 0} {
    set val #NIL
  } else {
    lassign $args val
  }
  MkVector [lrepeat [$k numval] $val]
}
CB)

H4 vector procedure

MD(
Given a number of Lisp values, K{vector} creates a vector containing them.
MD)

MD(
Example:
MD)

VB(
(vector 'a 'b 'c)   =>  #(a b c)
VB)

PR(
vector (public);args vals -> vec
PR)

CB(
reg vector ::constcl::vector

proc ::constcl::vector {args} {
  MkVector $args
}
CB)

TT(

::tcltest::test vectors-1.1 {try vector} -body {
    pew {(vector 'a 'b 'c)}
    pew {(vector 0 '(2 2 2 2) "Anna")}
} -output "#(a b c)\n#(0 (2 2 2 2) \"Anna\")\n"

TT)

H4 vector-length procedure

MD(
K{vector-length} returns the length of a vector.
MD)

MD(
Example:
MD)

VB(
(vector-length #(a b c))   =>  3
VB)

PR(
vector-length (public);vec vec -> num
PR)

CB(
reg vector-length

proc ::constcl::vector-length {vec} {
  check {vector? $vec} {
    VECTOR expected\n([pn] [$vec show])
  }
  return [$vec length]
}
CB)

TT(

::tcltest::test vectors-1.2 {try vector-length} -body {
    pew {(vector-length (vector 'a 'b 'c))}
} -output "3\n"

TT)

H4 vector-ref procedure

MD(
K{vector-ref} returns the element of E{vec} at index E{k} (0-based).
MD)

MD(
Example:
MD)

VB(
(let ((vec #(a b c)) (k 1))
  (vector-ref vec k))          =>  b
VB)

PR(
vector-ref (public);vec vec k num -> val
PR)

CB(
reg vector-ref ::constcl::vector-ref

proc ::constcl::vector-ref {vec k} {
  check {vector? $vec} {
    VECTOR expected\n([pn] [$vec show] [$k show])
  }
  check {number? $k} {
    NUMBER expected\n([pn] [$vec show] [$k show])
  }
  return [$vec ref $k]
}
CB)

TT(

::tcltest::test vectors-1.3 {try vector-ref} -body {
    pew {(vector-ref (vector 'a 'b 'c) 1)}
} -output "b\n"

TT)

H4 vector-set"! procedure

MD(
K{vector-set!}, for a non-constant vector, sets the element at index E{k} to E{val}.
MD)

MD(
Example:
MD)

VB(
(let ((vec #(a b c))
      (k 1)
      (val 'x))
  (vector-set! vec k val))      =>  *error*
(let ((vec (vector 'a 'b 'c))
      (k 1)
      (val 'x))
  (vector-set! vec k val))      =>  #(a x c)
VB)

PR(
vector-set! (public);vec vec k num val val -> vec
PR)

CB(
reg vector-set! ::constcl::vector-set!

proc ::constcl::vector-set! {vec k val} {
  check {vector? $vec} {
    VECTOR expected\n([pn] [$vec show] [$k show])
  }
  check {number? $k} {
    NUMBER expected\n([pn] [$vec show] [$k show])
  }
  return [$vec set! $k $val]
}
CB)

TT(

::tcltest::test vectors-1.4 {try vector-set!} -body {
    pew {(define x (lambda () (vector 0 '(2 2 2 2) "Anna")))}
    pew {(vector-set! (x) 1 '(foo bar))}
} -output "#(0 (foo bar) \"Anna\")\n"

TT)

H4 vector->list procedure

MD(
K{vector->list} converts a vector value to a Lisp list.
MD)

MD(
Example:
MD)

VB(
(vector->list #(a b c))   =>  (a b c)
VB)

PR(
vector->list (public);vec vec -> lvals
PR)

CB(
reg vector->list ::constcl::vector->list

proc ::constcl::vector->list {vec} {
  list {*}[$vec value]
}
CB)

TT(

::tcltest::test vectors-1.5 {try vector->list} -body {
    pew {(vector->list (vector 'a 'b 'c))}
} -output "(a b c)\n"

TT)

H4 list->vector procedure

MD(
K{list->vector} converts a Lisp list value to a vector.
MD)

MD(
Example:
MD)

VB(
(list->vector '(1 2 3))   =>  #(1 2 3)
VB)

PR(
list->vector (public);list lvals -> vec
PR)

CB(
reg list->vector ::constcl::list->vector

proc ::constcl::list->vector {list} {
  vector {*}[splitlist $list]
}
CB)

TT(

::tcltest::test vectors-1.6 {try list->vector} -body {
    pew {(list->vector '(a b c))}
} -output "#(a b c)\n"

TT)

H4 vector-fill"! procedure

MD(
K{vector-fill!} fills a non-constant vector with a given value.
MD)

MD(
Example:
MD)

VB(
(define vec (vector 'a 'b 'c))
(vector-fill! vec 'x)             =>  #(x x x)
vec                               =>  #(x x x)
VB)

PR(
vector-fill! (public);vec vec fill val -> vec
PR)

CB(
reg vector-fill! ::constcl::vector-fill!

proc ::constcl::vector-fill! {vec fill} {
  check {vector? $vec} {
    VECTOR expected\n([pn] [$vec show] \
      [$fill show])
  }
  $vec fill! $fill
}
CB)

TT(

::tcltest::test vectors-1.7 {try vector-fill!} -body {
    pew {(vector-fill! (vector 'a 'b 'c) 'x)}
} -output "#(x x x)\n"

TT)

# vim: ft=tcl tw=80 ts=2 sw=2 sts=2 et 
