
H3 Booleans

Booleans are logic values, either true (K{#t}) or false (K{#f}).  All predicates
(procedures whose name end with -?) return boolean values. 

H4 Pseudo-booleans

All values can be tested for truth (in a conditional form or as arguments to
K{and}, K{or}, or K{not}), though. Any value of any type is considered to be
true except for K{#f}.

H4 Boolean class

The Boolean class defines what capabilities a boolean has (in addition to those
from the NIL class), and also defines the internal representation of a boolean
value expression. A boolean is stored in an instance in the form of an
interpreter alias, and the K{boolval} method yields the alias as result.

CB(
oo::singleton create ::constcl::True {
  method mkconstant {} {}
  method write {port} {
    $port put [my show]
  }
  method display {port} {
    my write $port
  }
  method show {} {
    return "#t"
  }
}

oo::singleton create ::constcl::False {
  method mkconstant {} {}
  method write {port} {
    $port put [my show]
  }
  method display {port} {
    my write $port
  }
  method show {} {
    return "#f"
  }
}
CB)

H4 MkBoolean generator

Given a string (either K{"#t"} or K{"#f"}), K{MkBoolean} generates a boolean.

PR(
MkBoolean (internal);bool ebool -> bool
PR)

CB(
proc ::constcl::MkBoolean {bool} {
  switch $bool {
    "#t" { return ${::#t} }
    "#f" { return ${::#f} }
  }
}
CB)

TT(

::tcltest::test boolean-1.0 {evaluate boolean values} -body {
        pew "#t"
} -output "#t\n"

::tcltest::test boolean-1.1 {evaluate boolean values} -body {
        pew "#f"
} -output "#f\n"

::tcltest::test boolean-1.2 {evaluate boolean values} -body {
        pew "'#f"
} -output "#f\n"

::tcltest::test boolean-1.3 {equivalence of instance and constant} -body {
        expr {[::constcl::MkBoolean "#t"] == ${#t}}
} -result 1

::tcltest::test boolean-1.5 {equivalence of instance and constant} -body {
        expr {[pe "(> 3 2)"] == ${#t}}
} -result 1

::tcltest::test boolean-1.6 {equivalence of instance and constant} -body {
        expr {[pe "#t"] == ${#t}}
} -result 1

TT)

H4 boolean? procedure

The K{boolean?} predicate recognizes a Boolean by type.

PR(
boolean? (public);val val -> bool
PR)

CB(
reg boolean?

proc ::constcl::boolean? {val} {
  if {$val eq ${::#t} || $val eq ${::#f}} {
    return ${::#t}
  } else {
    return ${::#f}
  }
}
CB)

TT(

::tcltest::test boolean-2.0 {evaluate boolean values} -body {
        pew "(boolean? #f)"
} -output "#t\n"

::tcltest::test boolean-2.1 {evaluate boolean values} -body {
        pew "(boolean? 0)"
} -output "#f\n"

::tcltest::test boolean-2.2 {evaluate boolean values} -body {
        pew "(boolean? '())"
} -output "#f\n"

TT)

H4 not procedure

The only operations on booleans are the macros K{and} and S{or}{macros}, and K{not} (logical negation).

Example:

VB(
(not #f)    ==>  #t   ; #f yields #t, all others #f
(not nil)   ==>  #f   ; see?
VB)

PR(
not (public);val val -> bool
PR)

CB(
reg not

proc ::constcl::not {val} {
  if {$val eq ${::#f}} {
    return ${::#t}
  } else {
    return ${::#f}
  }
}
CB)

TT(

::tcltest::test boolean-3.0 {not procedure} -body {
        pew "(not #t)"
} -output "#f\n"

::tcltest::test boolean-3.1 {not procedure} -body {
        pew "(not #f)"
} -output "#t\n"

::tcltest::test boolean-3.2 {not procedure} -body {
        pew "(not nil)"
} -output "#f\n"

::tcltest::test boolean-3.3 {not procedure} -body {
        pew "(not (list 3))"
} -output "#f\n"

TT)

# vim: ft=tcl tw=80 ts=2 sw=2 sts=2 et 
