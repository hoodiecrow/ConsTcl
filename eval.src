
H2 Evaluation

MD(
The second thing an interpreter must be able to do is to reduce expressions to
their E{normal form}, or E{evaluate}I{eval}I{evaluator} them. As an example, 2 +
6 and 8 are two expressions that have the same value, but the latter is in
normal form (can't be reduced further) and the former is not.
MD)

H3 Syntactic forms

MD(
There are nine diffent forms or classes of expressions in Lisp. The evaluator
recognizes each one by its internal representation and chooses the appropriate
process to evaluate them. The nine forms will be described in the following
sections.

MD)

MD(
B{eval}

The heart of the Lisp interpreter, K{eval} takes a Lisp expression and processes
it according to its syntactic form.

K{eval} also does two kinds of rewriting of expressions: 1) E{macro expansion}
on a non-atomic expression into a more concrete expression. See the part about
macrosR{macros} below, and 2) resolving E{local defines}, acting on expressions
of the form K{(begin (define ...} when in a local environment. See the part
about resolving local definesR{resolving-local-defines}.
MD)

PR(
eval (public);expr expr env env -> val
PR)

IX eval
CB(
reg eval

proc ::constcl::eval \
  {expr {env ::constcl::global_env}} {
  if {[symbol? $expr] ne "#f"} {
    lookup $expr $env
  } elseif {[null? $expr] ne "#f" ||
    [atom? $expr] ne "#f"} {
    set expr
  } else {
    while {[[car $expr] name] in
      $::constcl::macrolist} {
      set expr [expand-macro $expr $env]
    }
    set op [car $expr]
    set args [cdr $expr]
    if {$env ne "::constcl::global_env" &&
      [$op name] eq "begin" &&
      ([pair? [car $args]] ne "#f" &&
      [[caar $args] name] eq "define")} {
      set expr [resolve-local-defines $args]
      set op [car $expr]
      set args [cdr $expr]
    }
    switch [$op name] {
      quote {
        car $args
      }
      if {
        if {[eval [car $args] $env] ne "#f"} \
          {eval [cadr $args] $env} \
          {eval [caddr $args] $env}
      }
      begin {
        /begin $args $env
      }
      define {
        /define [car $args] [
          eval [cadr $args] $env] $env
      }
      set! {
        /set! [car $args] [
          eval [cadr $args] $env] $env 
      }
      lambda {
        /lambda [car $args] [
          cdr $args] $env
      }
      default {
        invoke [eval $op $env] [
          eval-list $args $env]
      }
    }
  }
}
CB)


H4 Variable reference

MD(
EM Example: K{r} => 10 (a symbol K{r} is evaluated to 10)

A variableI{variable} is an identifier (symbol) bound to a location in the
environment. If an expression consists of the identifier it is evaluated to the
value stored in that location. This is handled by the helper procedure
K{lookup}. It searches the environment chain for the identifier, and returns the
value stored in the location it is bound to.  It is an error to do lookup on an
unbound symbol.

B{lookup}
MD)

PR(
lookup (internal);sym sym env env -> val
PR)

IX lookup
CB(
proc ::constcl::lookup {sym env} {
  [$env find $sym] get $sym
}
CB)

H4 Constant literal

MD(
EM Example: K{99} => 99 (a number evaluates to itself)

Not just numbers but booleans, characters, strings, and vectors evaluate to
themselves, to their innate value. Because of this, they are called autoquoting
types (see next paragraph).
MD)

H4 Quotation

MD(
EM Example: K{(quote r)} => K{r} (quotation makes the symbol evaluate to itself, like a constant)

According to the rules of variable reference, a symbol evaluates to its stored
value. Well, sometimes one wishes to use the symbol itself as a value. That is
what quotation is for. K{(quote x)} evaluates to the symbol x itself and not to
any value that might be stored under it. This is so common that there is a
shorthand notation for it: K{'x} is interpreted as K{(quote x)} by the Lisp
reader.
MD)

H4 Conditional

MD(
EM Example: K{(if (> 99 100) (* 2 2) (+ 2 4))} => 6

The conditional form K{if} evaluates a Lisp list of three expressions. The first,
the E{condition}, is evaluated first. If it evaluates to anything other than K{#f}
(false), the second expression (the E{consequent}) is evaluated and the value
returned. Otherwise, the third expression (the E{alternate}) is evaluated and the
value returned. One of the two latter expressions will be evaluated, and the
other will remain unevaluated.

B{/if}
MD)

PR(
/if (internal);condition expr consequent expr alternate expr -> val
PR)

IX /if
CB(
proc ::constcl::/if {cond conseq altern} {
  if {[uplevel $cond] ne "#f"} {
    uplevel $conseq
  } {
    uplevel $altern
  }
}
CB)

H4 Sequence

MD(
EM Example: K{(begin (define r 10) (* r r))} => 100

When expressions are evaluated in sequence, the order is important for two
reasons. If the expressions have any side effects, they happen in the same order
of sequence. Also, if expressions are part of a pipeline of calculations, then
they need to be processed in the order of that pipeline. The K{/begin} helper
procedure takes a Lisp list of expressions and evaluates them in sequence,
returning the value of the last one.

B{/begin}
MD)

PR(
/begin (internal);exps lexprs env env -> val
PR)

IX /begin
CB(
proc ::constcl::/begin {exps env} {
  /if {pair? $exps} {
    /if {pair? [cdr $exps]} {
      eval [car $exps] $env
      return [/begin [cdr $exps] $env]
    } {
      return [eval [car $exps] $env]
    }
  } {
    return #NIL
  }
}
CB)

H4 Definition

MD(
EM Example: K{(define r 10)} => ... (a definition doesn't evaluate to anything)

We've already seen the relationship between symbols and values. A symbol is
bound to a value (or rather to the location the value is in), creating a
variable, through definition. The K{/define} helper procedure adds a variable to
the current environment. It first checks that the symbol name is a valid
identifier, then it updates the environment with the new binding.

B{/define}
MD)

PR(
/define (internal);sym sym val val env env -> none
PR)

IX /define
CB(
proc ::constcl::/define {sym val env} {
  varcheck [idcheck [$sym name]]
  $env set $sym $val
  return
}
CB)

H4 Assignment

MD(
EM Example: K{(set! r 20)} => 20 (K{r} is a bound symbol, so it's allowed to assign to it)

Once a variable has been created, the value at the location it is bound to can
be changed (hence the name "variable", something that can be modified). The
process is called assignment. The K{/set!} helper does assignment: it modifies
an existing variable that is bound somewhere in the environment chain. It finds
the variable's environment and updates the binding. It returns the value, so
calls to K{set!} can be chained: K{(set! foo (set! bar 99))} sets both variables
to 99. By Scheme convention, procedures that modify variables have "!" at the
end of their name.

B{/set!}
MD)

PR(
/set! (internal);var bsym val val env env -> val
PR)

IX /set!
CB(
proc ::constcl::/set! {var val env} {
  [$env find $var] set $var $val
  set val
}
CB)

H4 Procedure definition

MD(
EM Example: K{(lambda (r) (* r r))} => K{::oo::Obj3601} (it will be a different object each time)

In Lisp, procedures are values just like numbers or characters. They can be
defined as the value of a symbol, passed to other procedures, and returned from
procedures. One diffence from most values is that procedures need to be defined.
Two questions must answered: what is the procedure meant to do? The code that
does that will form the body of the procedure. Also, what, if any, items of data
will have to be provided to the procedure to make it possible to calculate its
result?

As an example, imagine that we want to have a procedure that calculates the
square (K{x Â· x}) of a given number. In Lisp, expressions are written with
the operator first and then the operands: K{(* x x)}. That is the body of the
procedure. Now, what data will we have to provide to the procedure to make it
work? A value stored in the variable K{x} will do. It's only a single variable,
but by custom we need to put it in a list: K{(x)}. The operator that defines
procedures is called K{lambda}I{lambda}, and we define the function with
K{(lambda (x) (* x x))}.

One more step is needed before we can use the procedure. It must have a name. We
could define it like this: K{(define square (lambda (x) (* x x)))} but there is
actually a shortcut notation for it: K{(define (square x) (* x x))}.

Now, K{square} is pretty tame. How about the K{hypotenuse} procedure? K{(define
  (hypotenuse a b) (sqrt (+ (square a) (square b))))}. It calculates the square
  root of the sum of two squares.

Under the hood, the helper K{/lambda} makes a ProcedureR{control} object. First
it needs to convert the Lisp list K{body}. It is packed inside a K{begin} if it
has more than one expression, and taken out of its list if not. The Lisp list
K{formals} is passed on as it is.

A Scheme formals listI{formals list} is either:

IT An E{empty list}, K{()}, meaning that no arguments are accepted,
IT A E{proper list}, K{(a b c)}, meaning it accepts three arguments, one in each symbol,
IT A E{symbol}, K{a}, meaning that all arguments go into K{a}, or
IT A E{dotted list}, K{(a b . c)}, meaning that two arguments go into K{a} and K{b}, and the rest into K{c}.

B{/lambda}
MD)

PR(
/lambda (internal);formals formals body lexprs env env -> proc
PR)

IX /lambda
CB(
proc ::constcl::/lambda {formals body env} {
  if {[[length $body] value] > 1} {
    set body [cons [S begin] $body]
  } else {
    set body [car $body]
  }
  return [MkProcedure $formals $body $env]
}
CB)

H4 Procedure call

MD(
EM Example: K{(+ 1 6)} => 7

Once we have procedures, we can call them to have their calculations performed
and yield results. The procedure name is put in the operator position at the
front of a list, and the operands follow in the rest of the list. Our K{square}
procedure would be called for instance like this: K{(square 11)}, and it will
return 121.

K{invoke} arranges for a procedure to be called with each of the values in
the E{argument list} (the list of operands). It checks if pr really is a
procedure, and determines whether to call pr as an object or as a Tcl command.

B{invoke}
MD)

PR(
invoke (internal);pr proc vals lvals -> invoke
PR)

IX invoke
CB(
proc ::constcl::invoke {pr vals} {
  check {procedure? $pr} {
    PROCEDURE expected\n([$pr show] val ...)
  }
  if {[info object isa object $pr]} {
    $pr call {*}[splitlist $vals]
  } else {
    $pr {*}[splitlist $vals]
  }
}
CB)

TT(
::tcltest::test eval-1.0 {try triggering a check} -body {
    ::constcl::invoke #NIL [list #NIL #NIL]
} -returnCodes error -result "PROCEDURE expected\n(() val ...)"
TT)

MD(
B{splitlist}

K{splitlist} converts a Lisp list to a Tcl list with Lisp objects.
MD)

PR(
splitlist (internal);vals lvals -> tvals
PR)

IX splitlist
CB(
proc ::constcl::splitlist {vals} {
  set result {}
  while {[pair? $vals] ne "#f"} {
    lappend result [car $vals]
    set vals [cdr $vals]
  }
  return $result
}
CB)

MD(
B{eval-list}

K{eval-list} successively evaluates the elements of a Lisp list and returns the
collected results as a Lisp list.
MD)

PR(
eval-list (internal);exps lexprs env env -> lvals
PR)

IX eval-list
CB(
proc ::constcl::eval-list {exps env} {
  # don't convert to /if, it breaks (fact 100)
  if {[pair? $exps] ne "#f"} {
    return [cons [eval [car $exps] $env] \
      [eval-list [cdr $exps] $env]]
  } {
    return #NIL
  }
}
CB)

TT(

::tcltest::test eval-2.0 {lambda parameter lists} -body {
    pew {((lambda (x y z) (list x y z)) 3 4 5)}
    pew {((lambda x x) 3 4 5 6)}
    pew {((lambda (x y . z) (list x y)) 3 4 5 6)}
    pew {((lambda (x y . z) z) 3 4 5 6)}
} -output "(3 4 5)\n(3 4 5 6)\n(3 4)\n(5 6)\n"


::tcltest::test eval-3.0 {conditional: does internal if accept a #t? Yes, b/c of the ne in condition handling} -body {
    pew "(if (zero? 0) (* 4 4) (- 5 5))"
} -output "16\n"

TT)

CB
proc ::constcl::scheme-report-environment {version} {
    # TODO
}
CB

CB
proc ::constcl::null-environment {version} {
    # TODO
}
CB

CB
proc ::constcl::interaction-environment {} {
    # TODO
}
CB

# vim: ft=tcl tw=80 ts=2 sw=2 sts=2 et 
