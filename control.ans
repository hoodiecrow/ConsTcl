
H3 Control

This section concerns itself with procedures and the application of the same.

A K{Procedure} object is a W{closure}{Closure_(computer_programming)}I{closure},
storing the procedure's parameter list, the body, and the environment that is
current when the object is created, i.e. when the procedure is
R{defined}{procedure-definition}.

When a K{Procedure} object is called, the body is evaluated in a new environment
where the parameters are given values from the argument list and the outer link
goes to the closure environment.


H4 Procedure class

The Procedure class defines what capabilities a procedure has (in addition to
those from the Base class), and also defines the internal representation of a
procedure value expression. A procedure is stored in an instance as a tuple of
formal parameters, body, and closed over environment. There is no method that
yields the stored values.

CB(
catch { ::constcl::Procedure destroy }

oo::class create ::constcl::Procedure {
  superclass ::constcl::Base
  variable parms body env
CB)

The K{Procedure} constructor simply copies its arguments into the instance
variables K{parms}, K{body}, and K{env}.

PR(
Procedure constructor (internal);p formals b expr e env -> none
PR)

CB(
  constructor {p b e} {
    set parms $p
    set body $b
    set env $e
  }
}
CB)

The K{call} method makes each argument a tuple of K{VARIABLE} and the argument
value, storing the argument tuples in the list K{vals}. Then an environment is
created with the stored K{parms}, K{vals}, and stored K{env} as arguments. The
stored K{body} is evaluated in this environment and the result is returned.

PR(
(Procedure instance) call (internal);args vals -> val
PR)

CB(
oo::define ::constcl::Procedure method call {args} {
  set vals [lmap a $args {list VARIABLE $a}]
  ::constcl::eval $body [
    ::constcl::MkEnv $parms $vals $env]
}
CB)

The K{value} method is a dummy.

PR(
(Procedure instance) value (internal);-> none
PR)

CB(
oo::define ::constcl::Procedure method value {} {}
CB)

The K{tstr} method yields the external representation of the procedure. It is
used by error messages and by the K{write} method.

PR(
(Procedure instance) tstr (internal);-> tstr
PR)

CB(
oo::define ::constcl::Procedure method tstr {} {
  regexp {(\d+)} [self] -> num
  return "#<proc-$num>"
}
CB)

H4 MkProcedure generator

K{MkProcedure} generates a Procedure object.

PR(
MkProcedure (internal);parms formals body expr env env -> proc
PR)

CB(
interp alias {} ::constcl::MkProcedure \
  {} ::constcl::Procedure new
CB)

H4 procedure? procedure

K{procedure?} recognizes procedures either by type or by namespace, for
procedures that are Tcl commands.

PR(
procedure? (public);val val -> bool
PR)

CB(
reg procedure?

proc ::constcl::procedure? {val} {
  if {[typeof? $val Procedure] eq ${::#t}} {
    return ${::#t}
  } elseif {[::string match "::constcl::*" $val]} {
    return ${::#t}
  } else {
    return ${::#f}
  }
}
CB)

TT(

::tcltest::test control-1.0 {try procedure?)} -body {
    pew {(procedure? car)}
    pew {(procedure? 'car)}
    pew {(procedure? (lambda (x) (* x x)))}
} -output "#t\n#f\n#t\n"

TT)

H4 apply procedure

K{apply} applies a procedure to a Lisp list of Lisp arguments.

Example:

VB(
(apply + (list 2 3))   =>  5
VB)

PR(
apply (public);pr proc vals lvals -> invoke
PR)

CB(
reg apply

proc ::constcl::apply {pr vals} {
  check {procedure? $pr} {
    PROCEDURE expected\n([pn] [$pr tstr] ...)
  }
  invoke $pr $vals
}
CB)

TT(

::tcltest::test control-2.0 {try apply)} -body {
    pew {(apply + (list 3 4))}
    pew {(define compose
  (lambda (f g)
    (lambda args
      (f (apply g args)))))}
    pew {((compose sqrt *) 12 75)}
} -output "7\n30.0\n"

::tcltest::test control-2.1 {try triggering a check} -body {
    pew {(apply #\+ (list 3 4))}
} -returnCodes error -result "PROCEDURE expected\n(apply #\\+ ...)"

TT)

H4 map procedure

K{map} iterates over one or more lists, taking an element from each list to pass to
a procedure as an argument. The Lisp list of the results of the invocations is 
returned.

Example:

VB(
(map + '(1 2 3) '(5 6 7))   => (6 8 10)
VB)

PR(
map (public);pr proc args lists -> lvals
PR)

CB(
reg map

proc ::constcl::map {pr args} {
  check {procedure? $pr} {
    PROCEDURE expected\n([pn] [$pr tstr] ...)
  }
CB)

The procedure iterates over the list of argument lists, converting each of them
to a Tcl list.

CB(
  set arglists $args
  for {set i 0} \
    {$i < [llength $arglists]} \
    {incr i} {
    lset arglists $i [
      splitlist [lindex $arglists $i]]
  }
CB)

The procedure iterates over the items in each argument list (K{item}) and each
argument list (K{arglist}), building a list of actual parameters (K{actuals}).
Then K{pr} is invoked on the Lisp list of actuals and the result list-appended
to K{res}. After all the iterations, the Lisp list of items in K{res} is
returned.

CB(
  set res {}
  for {set item 0} \
    {$item < [llength [lindex $arglists 0]]} \
    {incr item} {
    set actuals {}
    for {set arglist 0} \
      {$arglist < [llength $arglists]} \
      {incr arglist} {
      lappend actuals [
        lindex $arglists $arglist $item]
    }
    lappend res [invoke $pr [list {*}$actuals]]
  }
  return [list {*}$res]
}
CB)

TT(

::tcltest::test control-3.0 {try map)} -body {
    pew {(map cadr '((a b) (d e) (g h)))}
    pew {(map (lambda (n) (expt n n)) '(1 2 3 4 5))}
    pew {(map + '(1 2 3) '(4 5 6))}
    pew {(let ((count 0))
  (map (lambda (ignored)
         (set! count (+ count 1))
         count)
       '(a b)))}
} -output "(b e h)\n(1.0 4.0 27.0 256.0 3125.0)\n(5 7 9)\n(1 2)\n"

TT)

H4 for-each procedure

K{for-each} iterates over one or more lists, taking an element from each list to pass to
a procedure as an argument. The empty list is returned.

Example: (from R5RS; must be pasted as a oneliner for the K{tkcon} repl to stomach it.)

VB(
(let ((v (make-vector 5)))
  (for-each (lambda (i)
              (vector-set! v i (* i i)))
            '(0 1 2 3 4))
  v)                        =>  #(0 1 4 9 16)
VB)

PR(
for-each (public);pr proc args lists -> nil
PR)

CB(
reg for-each

proc ::constcl::for-each {proc args} {
  check {procedure? $proc} {
    PROCEDURE expected\n([pn] [$proc tstr] ...)
  }
CB)

The procedure iterates over the list of argument lists, converting each of them
to a Tcl list.

CB(
  set arglists $args
  for {set i 0} \
    {$i < [llength $arglists]} \
    {incr i} {
    lset arglists $i [
      splitlist [lindex $arglists $i]]
  }
CB)

The procedure iterates over the items in each argument list (K{item}) and each
argument list (K{arglist}), building a list of actual parameters (K{actuals}).
Then K{proc} is invoked on the Lisp list of actuals. After all the iterations,
the empty list is returned.

CB(
  for {set item 0} \
    {$item < [llength [lindex $arglists 0]]} \
    {incr item} {
    set actuals {}
    for {set arglist 0} \
      {$arglist < [llength $arglists]} \
      {incr arglist} {
      lappend actuals [
        lindex $arglists $arglist $item]
    }
    invoke $proc [list {*}$actuals]
  }
  return ${::#NIL}
}
CB)

TT(

::tcltest::test control-4.0 {try for-each)} -body {
    pew {(for-each display '(1 2 3))}
} -output "123()\n"

::tcltest::test control-4.1 {try for-each)} -body {
    pew {(let ((v (make-vector 5)))
  (for-each (lambda (i)
              (vector-set! v i (* i i)))
            '(0 1 2 3 4))
  v)}
} -output "#(0 1 4 9 16)\n"

TT)

# vim: ft=tcl tw=80 ts=2 sw=2 sts=2 et 
