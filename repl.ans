
H2 The REPL

The REPL (read-eval-print loop) is a
loop that repeatedly E{reads} a Scheme source string from the user through the
command K{::constcl::input} (breaking the loop if given an empty line) and
K{::constcl::parse}, E{evaluates} it using K{::constcl::eval}, and E{prints} using
K{::constcl::write}.

B{input}

K{input} is modelled after the Python 3 function. It displays a prompt and reads a string.

IX input
CB(
proc ::constcl::input {prompt} {
  puts -nonewline $prompt
  flush stdout
  set buf [gets stdin]
  set openpars [regexp -all -inline {\(} $buf]
  set clsepars [regexp -all -inline {\)} $buf]
  set openbrak [regexp -all -inline {\[} $buf]
  set clsebrak [regexp -all -inline {\]} $buf]
  while {[llength $openpars] > [llength $clsepars] ||
         [llength $openbrak] > [llength $clsebrak]} {
    ::append buf [gets stdin]
    set openpars [regexp -all -inline {\(} $buf]
    set clsepars [regexp -all -inline {\)} $buf]
    set openbrak [regexp -all -inline {\[} $buf]
    set clsebrak [regexp -all -inline {\]} $buf]
  }
  return $buf
}
CB)

B{repl}

K{repl} puts the `loop' in the read-eval-print loop. It repeats prompting for a
string until given a blank input. Given non-blank input, it parses and evaluates
the string, printing the resulting value.

IX repl
CB(
proc ::repl {{prompt "ConsTcl> "}} {
  set cur_env [::constcl::MkEnv ::constcl::global_env]
  set str [::constcl::input $prompt]
  while {$str ne ""} {
    set expr [::constcl::parse $str]
    set val [::constcl::eval $expr $cur_env]
    ::constcl::write $val
    set str [::constcl::input $prompt]
  }
  $cur_env destroy
}
CB)

Well! 

After 1870 lines of code, the interpreter is done.

Now for the built-in procedures!

# vim: ft=tcl tw=80 ts=2 sw=2 sts=2 et 
