
H3 Symbols

Symbols are like little immutable strings that are used to refer to things
(variables, category labels, collection keys, etc) or for equality comparison
against each other.

H4 Symbol class

The Symbol class defines what capabilities a symbol has (in addition to those
from the Base class), and also defines the internal representation of a symbol
value expression. A symbol is stored in an instance as a Tcl string, and
the K{name} method yields the symbol's name as result.

CB(
oo::class create ::constcl::Symbol {
  superclass ::constcl::Base
  variable name caseconstant
CB)

The Symbol constructor checks that the given name is a valid identifier and then
stores it. It also sets K{caseconstant} to 0, indicating that the name doesn't
keep its case when turned into a string.

PR(
Symbol constructor (internal);n tstr -> none
PR)

CB(
  constructor {n} {
    ::constcl::idcheck $n
    set name $n
    set caseconstant 0
  }
CB)

The K{name} method returns the symbol's name.

PR(
(Symbol instance) name (internal);-> tstr
PR)

CB(
  method name {} {
    set name
  }
CB)

The K{value} method is a synonym for K{name}.

PR(
(Symbol instance) value (internal);-> tstr
PR)

CB(
  method value {} {
    set name
  }
CB)

The K{=} compares the stored name with the name of a given symbol. It returns
K{#t} if they are equal, otherwise K{#f}.

PR(
(Symbol instance) = (internal);sym sym -> bool
PR)

CB(
  method = {symname} {
    if {$name eq [$sym name]} {
      return ${::#t}
    } else {
      return ${::#f}
    }
  }
CB)

The K{constant} method signals whether the symbol instance is mutable (it is).

PR(
(Symbol instance) constant (internal);-> tbooltrue
PR)

CB(
  method constant {} {
    return 1
  }
CB)

The K{case-constant} method signals whether the symbol instance is E{case
  constant}, i.e. keeps its case when turned into a string.

PR(
(Symbol instance) case-constant (internal);-> tbool
PR)

CB(
  method case-constant {} {
    set caseconstant
  }
CB)

The K{make-case-constant} method makes the symbol E{case constant}.

PR(
(Symbol instance) make-case-constant (internal);-> tbooltrue
PR)

CB(
  method make-case-constant {} {
    set caseconstant 1
  }
CB)

The K{tstr} method yields the external representation of the symbol instance (the name) as a
Tcl string. It is used by error messages.

PR(
(Pair instance) tstr (internal);-> tstr
PR)

CB(
  method tstr {} {
    return $name
  }
}
CB)

H4 MkSymbol generator

K{MkSymbol} generates a symbol with a given name. If a symbol with that name
already exists, it is returned. Otherwise, a fresh symbol is created. Short
form: K{S}.

PR(
MkSymbol (internal);str tstr -> sym
PR)

CB(
proc ::constcl::MkSymbol {str} {
  if {[dict exists $::constcl::symbolTable $str]} {
    return [dict get $::constcl::symbolTable $str]
  } else {
    set sym [::constcl::Symbol new $str]
    dict set ::constcl::symbolTable $str $sym
    return $sym
  }
}
interp alias {} S {} ::constcl::MkSymbol
CB)

H4 symbol? procedure

K{symbol?} recognizes a symbol by type.

PR(
symbol? (public);val val -> bool
PR)

CB(
reg symbol?

proc ::constcl::symbol? {val} {
  typeof? $val Symbol
}
CB)

TT(

::tcltest::test symbols-1.0 {try symbol?} -body {
    pew {(symbol? 'foo)}
    pew {(symbol? (car '(a b)))}
    pew {(symbol? "bar")}
    pew {(symbol? 'nil)}
    pew {(symbol? '())}
    pew {(symbol? #f)}
} -output "#t\n#t\n#f\n#t\n#f\n#f\n"

TT)

H4 symbol->string procedure

K{symbol->string} yields a string consisting of the symbol name, usually
lower-cased.

Example:

VB(
(let ((sym 'Foobar))
  (symbol->string sym))   ==>  "foobar"
VB)

PR(
symbol->string (public);sym sym -> str
PR)

CB(
reg symbol->string

proc ::constcl::symbol->string {sym} {
  check {symbol? $sym} {
    SYMBOL expected\n([pn] [$sym tstr])
  }
  if {![$sym case-constant]} {
    set str [MkString [
      ::string tolower [$sym name]]]
  } else {
    set str [MkString [$sym name]]
  }
  $str mkconstant
  return $str
}
CB)

TT(

::tcltest::test symbols-1.1 {try symbol->string (and string->symbol)} -body {
    pew {(symbol->string 'flying-fish)}
    pew {(symbol->string 'Martin)}
    pew {(symbol->string (string->symbol "Malvina"))}
} -output {"flying-fish"
"martin"
"Malvina"
}

::tcltest::test symbols-1.2 {try symbol->string} -body {
    pew {(string-set! (symbol->string 'flying-fish) 3 #\A)}
} -returnCodes error -result "string is constant"

TT)

H4 string->symbol procedure

K{string->symbol} creates a symbol with the name given by the string. The symbol
is 'case-constant', i.e. it will not be lower-cased.

Example:

VB(
(define sym (let ((str "Foobar"))
              (string->symbol str)))
sym                                    ==>  Foobar
(symbol->string sym)                   ==>  "Foobar"
VB)

PR(
string->symbol (public);str str -> sym
PR)

CB(
reg string->symbol

proc ::constcl::string->symbol {str} {
  check {string? $str} {
    STRING expected\n([pn] [$obj tstr])
  }
  set sym [MkSymbol [$str value]]
  $sym make-case-constant
  return $sym
}
CB)

# vim: ft=tcl tw=80 ts=2 sw=2 sts=2 et  
