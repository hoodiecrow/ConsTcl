
H3 Symbols

Symbols are like little immutable strings that are used to refer to things
(variables, category labels, collection keys, etc) or for equality comparison
against each other.

H4 Symbol class

CB(
oo::class create ::constcl::Symbol {
  superclass ::constcl::NIL
  variable name caseconstant
  constructor {n} {
    ::constcl::idcheck $n
    set name $n
    set caseconstant 0
  }
  method name {} {
    set name
  }
  method value {} {
    set name
  }
  method = {symname} {
    if {$name eq $symname} {
      return #t
    } else {
      return #f
    }
  }
  method constant {} {
    return 1
  }
  method make-case-constant {} {
    set caseconstant 1
  }
  method case-constant {} {
    set caseconstant
  }
  method write {port} {
    $port put [my name]
  }
  method display {port} {
    my write $port
  }
  method show {} {
    my name
  }
}
CB)

H4 MkSymbol generator

K{MkSymbol} generates a symbol with a given name. If a symbol with that name
already exists, it is returned. Otherwise, a fresh symbol is created. Short
form: K{S}.

PR(
MkSymbol (internal);str tstr -> sym
PR)

CB(
proc ::constcl::MkSymbol {str} {
  if {[dict exists $::constcl::symbolTable $str]} {
    return [dict get $::constcl::symbolTable $str]
  } else {
    set sym [::constcl::Symbol new $str]
    dict set ::constcl::symbolTable $str $sym
    return $sym
  }
}
interp alias {} S {} ::constcl::MkSymbol
CB)

H4 symbol? procedure

K{symbol?} recognizes a symbol by type.

PR(
symbol? (public);val val -> bool
PR)

CB(
reg symbol?

proc ::constcl::symbol? {val} {
  typeof? $val Symbol
}
CB)

TT(

::tcltest::test symbols-1.0 {try symbol?} -body {
    pew {(symbol? 'foo)}
    pew {(symbol? (car '(a b)))}
    pew {(symbol? "bar")}
    pew {(symbol? 'nil)}
    pew {(symbol? '())}
    pew {(symbol? #f)}
    puts [::constcl::symbol? [S quote]]
} -output "#t\n#t\n#f\n#t\n#f\n#f\n#t\n"

TT)

H4 symbol->string procedure

K{symbol->string} yields a string consisting of the symbol name, usually
lower-cased.

Example:

VB(
(let ((sym 'Foobar))
  (symbol->string sym))   ==>  "foobar"
VB)

PR(
symbol->string (public);sym sym -> str
PR)

CB(
reg symbol->string

proc ::constcl::symbol->string {sym} {
  check {symbol? $sym} {
    SYMBOL expected\n([pn] [$sym show])
  }
  if {![$sym case-constant]} {
    set str [MkString [
      ::string tolower [$sym name]]]
  } else {
    set str [MkString [$sym name]]
  }
  $str mkconstant
  return $str
}
CB)

TT(

::tcltest::test symbols-1.1 {try symbol->string (and string->symbol)} -body {
    pew {(symbol->string 'flying-fish)}
    pew {(symbol->string 'Martin)}
    pew {(symbol->string (string->symbol "Malvina"))}
} -output {"flying-fish"
"martin"
"Malvina"
}

::tcltest::test symbols-1.2 {try symbol->string} -constraints knownBug -body { ;# bug: don't know, hangs tkcon
    pew {(string-set! (symbol->string 'flying-fish) 3 #\A}
} -returnCodes error -result ""

TT)

H4 string->symbol procedure

K{string->symbol} creates a symbol with the name given by the string. The symbol
is 'case-constant', i.e. it will not be lower-cased.

Example:

VB(
(define sym (let ((str "Foobar"))
              (string->symbol str)))
sym                                    ==>  Foobar
(symbol->string sym)                   ==>  "Foobar"
VB)

PR(
string->symbol (public);str str -> sym
PR)

CB(
reg string->symbol

proc ::constcl::string->symbol {str} {
  check {string? $str} {
    STRING expected\n([pn] [$obj show])
  }
  set sym [MkSymbol [$str value]]
  $sym make-case-constant
  return $sym
}
CB)

# vim: ft=tcl tw=80 ts=2 sw=2 sts=2 et  
