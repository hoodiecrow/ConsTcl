
H2 Environment class and objects

The class for environments is called K{Environment}. It is mostly a wrapper
around a dictionary, with the added finesse of keeping a link to the outer
environment. In this way, there is a chain connecting the latest environment all
the way to the global environment and then stopping at the null environment.
This chain can be traversed by the K{find} method to find which innermost environment
a given symbol is bound in.

Using a dictionary means that name lookup is by hash table lookup. In a typical
Lisp implementation, large environments are served by hash lookup, while small
ones have name lookup by linear search.

The long and complex constructor is to accommodate the variations of Scheme
parameter lists, which can be empty, a proper list, a symbol, or a dotted list.

Names are stored as Lisp symbols, while values are stored as they are, as
Lisp or Tcl values.  This means that a name might have to be converted to a
symbol before lookup, and the result of lookup may have to be converted
afterwards. Note that in the two cases where a number of values are stored under
one name (a formals list of a single symbol or a dotted list), then the values
are stored as a Lisp list of values.

H4 Environment class

CB(
catch { ::constcl::Environment destroy }

oo::class create ::constcl::Environment {
  variable bindings outer_env
  constructor {syms vals {outer {}}} {
    set bindings [dict create]
    if {[T [::constcl::null? $syms]]} {
      if {[llength $vals]} {
        error "too many arguments"
      }
    } elseif {[T [::constcl::list? $syms]]} {
      set syms [::constcl::splitlist $syms]
      set symsn [llength $syms]
      set valsn [llength $vals]
      if {$symsn != $valsn} {
        error [
          ::append --> "wrong # of arguments, " \
            "$valsn instead of $symsn"]
      }
      foreach sym $syms val $vals {
        my bind $sym [lindex $val 0] [lindex $val 1]
      }
    } elseif {[T [::constcl::symbol? $syms]]} {
      my bind $syms VARIABLE [
        ::constcl::list {*}[lmap v $vals {
          lindex $v 1
        }]]
    } else {
      while true {
        if {[llength $vals] < 1} {
          error "too few arguments"
        }
        my bind [::constcl::car $syms] \
          [lindex $vals 0 0] [lindex $vals 0 1]
        set vals [lrange $vals 1 end]
        if {[T [
          ::constcl::symbol? [
            ::constcl::cdr $syms]]]} {
          my bind [::constcl::cdr $syms] \
            VARIABLE [
              ::constcl::list {*}[lmap v $vals {
                lindex $v 1
              }]]
          set vals {}
          break
        } else {
          set syms [::constcl::cdr $syms]
        }
      }
    }
    set outer_env $outer
  }
  method find {sym} {
    ::constcl::check {::constcl::symbol? $sym} {
      "SYMBOL expected\nEnvironment find"
    }
    if {[dict exists $bindings $sym]} {
      self
    } else {
      $outer_env find $sym
    }
  }
  method get {sym} {
    ::constcl::check {::constcl::symbol? $sym} {
      "SYMBOL expected\nEnvironment get"
    }
    dict get $bindings $sym
  }
  method unbind {sym} {
    ::constcl::check {::constcl::symbol? $sym} {
      "SYMBOL expected\nEnvironment unbind"
    }
    dict unset bindings $sym
  }
  method bind {sym type info} {
    ::constcl::check {::constcl::symbol? $sym} {
      "SYMBOL expected\nEnvironment bind"
    }
    if {[dict exists $bindings $sym]} {
      set bi [my get $sym]
      lassign $bi bt in
      if {$bt in {SPECIAL VARIABLE SYNTAX}} {
        error "[$sym name] is already bound"
      }
    }
    dict set bindings $sym [::list $type $info]
  }
  method assign {sym type info} {
    ::constcl::check {::constcl::symbol? $sym} {
      "SYMBOL expected\nEnvironment assign"
    }
    if {![dict exists $bindings $sym]} {
      error "[$sym name] is not bound"
    }
    set bi [my get $sym]
    lassign $bi bt in
    if {$bt ne "VARIABLE"} {
      error "[$sym name] is not assignable"
    }
    dict set bindings $sym [::list $type $info]
  }
  method parent {} {
    set outer_env
  }
  method names {} {
    dict keys $bindings
  }
  method values {} {
    dict values $bindings
  }
  method write {port} {
    regexp {(\d+)} [self] -> num
    $port put "#<env-$num>"
  }
  method display {port} {
    my write $port
  }
}
CB)

H4 MkEnv generator


PR(
MkEnv (internal);?parms? formals ?vals? tvals env env -> env
PR)

CB(
proc ::constcl::MkEnv {args} {
  if {[llength $args] == 1} {
    set parms #NIL
    set vals {}
    lassign $args env
  } elseif {[llength $args] == 3} {
    lassign $args parms vals env
  } else {
    error "wrong number of arguments"
  }
  Environment new $parms $vals $env
}
CB)

H4 environment? procedure

Recognizes an environment by type.

PR(
environment? (public);val val -> bool
PR)

CB(
reg environment?

proc ::constcl::environment? {val} {
  typeof? $val Environment
}
CB)

H3 Lexical scoping

Example:

VB(
ConsTcl> (define (circle-area r) (* pi (* r r)))
ConsTcl> (circle-area 10)
314.1592653589793
VB)

During a call to the procedure K{circle-area}, the symbol K{r} is bound to the
value 10. But we don't want the binding to go into the global environment,
possibly clobbering an earlier definition of K{r}. The solution is to use
separate (but linked) environments, making K{r}'s binding a
W{local variable}{Local_variable}I{local variable}
in its own environment, which the procedure will be evaluated in. The symbols
K{*} and K{pi} will still be available through the local environment's link
to the outer global environment. This is all part of
W{lexical scoping}{Scope_(computer_science)#Lexical_scope}I{lexical scope}.

In the first image, we see the global environment before we call K{circle-area}
(and also the empty null environment which the global environment links to):

IG /images/env1.png

During the call. Note how the global K{r} is shadowed by the local one, and how
the local environment links to the global one to find K{*} and K{pi}. 

IG /images/env2.png

After the call, we are back to the first state again.

IG /images/env1.png

# vim: ft=tcl tw=80 ts=2 sw=2 sts=2 et 
