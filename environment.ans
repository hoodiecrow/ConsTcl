
H2 Environment class and objects

MD(
The class for environments is called K{Environment}. It is mostly a wrapper around a dictionary,
with the added finesse of keeping a link to the outer environment (starting a chain that goes all
the way to the global environment and then stops at the null environment) which can be traversed
by the find method to find which innermost environment a given symbol is bound in.

The long and complex constructor is to accommodate the variations of Scheme parameter lists, which 
can be empty, a proper list, a symbol, or a dotted list.
MD)

H4 Environment class

CB(
catch { ::constcl::Environment destroy }

oo::class create ::constcl::Environment {
  variable bindings outer_env
  constructor {syms vals {outer {}}} {
    set bindings [dict create]
    if {[::constcl::null? $syms] eq "#t"} {
      if {[llength $vals]} {
        error "too many arguments"
      }
    } elseif {[::constcl::list? $syms] eq "#t"} {
      set syms [::constcl::splitlist $syms]
      set symsn [llength $syms]
      set valsn [llength $vals]
      if {$symsn != $valsn} {
        error [
          ::append --> "wrong # of arguments, " \
            "$valsn instead of $symsn"]
      }
      foreach sym $syms val $vals {
        my set $sym $val
      }
    } elseif {[::constcl::symbol? $syms] eq "#t"} {
      my set $syms [::constcl::list {*}$vals]
    } else {
      while true {
        if {[llength $vals] < 1} {
          error "too few arguments"
        }
        my set [::constcl::car $syms] \
          [lindex $vals 0]
        set vals [lrange $vals 1 end]
        if {[
          ::constcl::symbol? [
            ::constcl::cdr $syms]] eq "#t"} {
          my set [::constcl::cdr $syms] \
            [::constcl::list {*}$vals]
          set vals {}
          break
        } else {
          set syms [::constcl::cdr $syms]
        }
      }
    }
    set outer_env $outer
  }
  method find {sym} {
    if {$sym in [dict keys $bindings]} {
      self
    } else {
      $outer_env find $sym
    }
  }
  method get {sym} {
    dict get $bindings $sym
  }
  method set {sym val} {
    dict set bindings $sym $val
  }
  method parent {} {
    set outer_env
  }
  method names {} {
    dict keys $bindings
  }
  method values {} {
    dict values $bindings
  }
}
CB)

H3 MIT Scheme environment library

MD(
Definition by MIT, implementation by me.
MD)

H4 environment? procedure

MD(
Recognizes an environment by type.
MD)

PR(
reg environment?

environment? (public);val val -> bool
PR)

CB(
proc ::constcl::environment? {val} {
  typeof? $val Environment
}
CB)

H4 environment-has-parent? procedure
MD(
Returns K{#t} if E{env} has a parent environment; otherwise returns K{#f}.
MD)

PR(
environment-has-parent? (public); env env -> bool
PR)

CB(
reg environment-has-parent?

proc ::constcl::environment-has-parent? {env} {
  if {[$env parent] ne "#NIL"} {
    return #t
  } else {
    return #f
  }
}
CB)

H4 environment-parent procedure

MD(
Returns the parent environment of E{env}. It is an error if E{env} has
no parent.
MD)

PR(
environment-parent (public);env env -> env
PR)

CB(
reg environment-parent

proc ::constcl::environment-parent {env} {
  set parent [$env parent]
  if {$parent ne "#NIL"} {
    return $parent
  } else {
    error "[$env show] has no parent"
  }
}
CB)

H4 environment-bound-names procedure

MD(
Returns a newly allocated list of the names (symbols) that are bound by
E{env}. This does not include the names that are bound by the parent
environment of E{env}.
MD)

PR(
environment-bound-names (public);env env -> lsyms
PR)

CB(
reg environment-bound-names

proc ::constcl::environment-bound-names {env} {
  list {*}[$env names]
}
CB)

H4 environment-bindings procedure

MD(
Returns a newly allocated list of the bindings of E{env}; does not
include the bindings of the parent environment. Each element of this list takes
one of two forms: K{(name)} indicates that name is bound but unassigned, while
K{(name . object)} indicates that E{name} is bound, and its value is E{object}.
MD)

PR(
environment-bindings (public);env env -> lasss
PR)

CB(
reg environment-bindings

proc ::constcl::environment-bindings {env} {
  pairlis-tcl [list {*}[$env names]] [list {*}[$env values]]
}
CB)

H4 environment-bound?

MD(
Returns K{#t} if E{sym} is bound in E{env} or one of its ancestor
environments; otherwise returns K{#f}.
MD)

PR(
environment-bound? (public);env env sym sym -> bool
PR)

CB(
reg environment-bound?

proc ::constcl::environment-bound? {env sym} {
  # X
  set e [$env find $sym]
  if {$e eq "::constcl::null_env"} {
    return #f
  } else {
    return #t
  }
}
CB)

H4 environment-lookup procedure

MD(
E{Sym} must be bound in E{env} or one of its ancestor environments. Returns
the value to which it is bound.
MD)

PR(
environment-lookup (public);env env sym sym -> val
PR)

CB(
reg environment-lookup

proc ::constcl::environment-lookup {env sym} {
  if {[T [environment-bound? $env $sym]]} {
    lookup $sym [$env find $sym]
  }
}
CB)

H4 environment-assignable? procedure

MD(
Symbol must be bound in environment or one of its ancestor environments. Returns
K{#t} if the binding may be modified by side effect.
MD)

PR(
environment-assignable? (public);env env sym sym -> bool
PR)

CB(
reg environment-assignable?

proc ::constcl::environment-assignable? {env sym} {
  if {[environment-bound? $env $sym]} {
    # all bound names are assignable in ConsTcl
    return #t
  }
}
CB)

H4 environment-assign! procedure

MD(
E{Sym} must be bound in E{env} or one of its ancestor environments, and
must be assignable. Modifies the binding to have E{obj} as its value, and
returns an unspecified result.
MD)

PR(
environment-assign! (public);env env sym sym obj val -> none
PR)

CB(
reg environment-assign!

proc ::constcl::environment-assign! {env sym obj} {
  /set! $sym $obj $env  
}
CB)

H4 system-global-environment variable

MD(
The variable K{system-global-environment} is bound to the environment that's the
parent of the K{user-initial-environment}. Primitives and system procedures are
bound (and sometimes closed) in this environment.
MD)

H4 user-initial-environment variable

MD(
The variable K{user-initial-environment} is bound to the default environment in
which typed expressions are evaluated by the top-level REP loop.
MD)

H4 nearest-repl/environment procedure

MD(
Returns the current REP loop environment (i.e. the current environment of the
closest enclosing REP loop). When Scheme first starts up, this is the same as
K{user-initial-environment}.
MD)

PR(
nearest-repl/environment (public);-> env
PR)

CB(
proc ::constcl::nearest-repl/environment {} {
  # TODO
}
CB)

H4 ge procedure

MD(
Changes the current REP loop environment to K{env}. K{env} can be
either an environment or a procedure object. If it's a procedure, the
environment in which that procedure was closed is the new environment.
MD)

PR(
ge (public);env envproc -> none
PR)

CB(
proc ::constcl::ge {env} {
  # TODO
}
CB)

H4 make-environment special form

MD(
Produces a new environment that is a child of the environment in which it is
executed, evaluates the expressions sequentially in the new environment, and
returns the new environment. Note that
MD)

KB (make-environment expression ...)

MD(
is equivalent to:
MD)

VB(
(let ()
  expression ...
  (the-environment))
VB)

PR(
make-environment (public);exps lexprs -> env
PR)

CB(
reg make-environment

proc make-environment {exps} {
  set env [
    Environment new #NIL {} [the-environment]]
  set body $exps
  /define [S body] $body $env
  set qq "`(let ()
             ,@body
             (the-environment))"
  set expr [expand-quasiquote [parse $qq] $env]
  return [eval $expr $env]
}
CB)

H4 the-environment special form

MD(
Returns the current environment.
MD)

PR(
the-environment (public);-> env
PR)

CB(
proc the-environment {} {
  # TODO
}
CB)

H4 interpreter-environment? procedure

MD(
Returns K{#t} if E{val} is an interpreter environment; otherwise returns K{#f}.
MD)

PR(
interpreter-environment? (public);val val -> bool
PR)

CB(
reg interpreter-environment

proc interpreter-environment {val} {
  # TODO
}
CB)

H3 Lexical scoping

MD(
Example:
MD)

VB(
ConsTcl> (define (circle-area r) (* pi (* r r)))
ConsTcl> (circle-area 10)
314.1592653589793
VB)

MD(
During a call to the procedure K{circle-area}, the symbol K{r} is bound to the
value 10. But we don't want the binding to go into the global environment,
possibly clobbering an earlier definition of K{r}. The solution is to use
separate (but linked) environments, making K{r}'s binding a
W{local variable}{Local_variable}I{local variable}
in its own environment, which the procedure will be evaluated in. The symbols
K{*} and K{pi} will still be available through the local environment's link
to the outer global environment. This is all part of
W{lexical scoping}{Scope_(computer_science)#Lexical_scope}I{lexical scope}.

In the first image, we see the global environment before we call K{circle-area}
(and also the empty null environment which the global environment links to):

IG /images/env1.png

During the call. Note how the global K{r} is shadowed by the local one, and how
the local environment links to the global one to find K{*} and K{pi}. 

IG /images/env2.png

After the call, we are back to the first state again.

IG /images/env1.png
MD)

# vim: ft=tcl tw=80 ts=2 sw=2 sts=2 et 
