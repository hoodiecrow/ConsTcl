
H2 Environment class and objects

MD(
The class for environments is called K{Environment}. It is mostly a wrapper around a dictionary,
with the added finesse of keeping a link to the outer environment (starting a chain that goes all
the way to the global environment and then stops at the null environment) which can be traversed
by the find method to find which innermost environment a given symbol is bound in.

The long and complex constructor is to accommodate the variations of Scheme parameter lists, which 
can be empty, a proper list, a symbol, or a dotted list.
MD)

H4 Environment class

CB(
catch { ::constcl::Environment destroy }

oo::class create ::constcl::Environment {
  variable bindings outer_env
  constructor {syms vals {outer {}}} {
    set bindings [dict create]
    if {[::constcl::null? $syms] eq "#t"} {
      if {[llength $vals]} {
        error "too many arguments"
      }
    } elseif {[::constcl::list? $syms] eq "#t"} {
      set syms [::constcl::splitlist $syms]
      set symsn [llength $syms]
      set valsn [llength $vals]
      if {$symsn != $valsn} {
        error [
          ::append --> "wrong # of arguments, " \
            "$valsn instead of $symsn"]
      }
      foreach sym $syms val $vals {
        my set $sym $val
      }
    } elseif {[::constcl::symbol? $syms] eq "#t"} {
      my set $syms [::constcl::list {*}$vals]
    } else {
      while true {
        if {[llength $vals] < 1} {
          error "too few arguments"
        }
        my set [::constcl::car $syms] \
          [lindex $vals 0]
        set vals [lrange $vals 1 end]
        if {[
          ::constcl::symbol? [
            ::constcl::cdr $syms]] eq "#t"} {
          my set [::constcl::cdr $syms] \
            [::constcl::list {*}$vals]
          set vals {}
          break
        } else {
          set syms [::constcl::cdr $syms]
        }
      }
    }
    set outer_env $outer
  }
  method find {sym} {
    if {$sym in [dict keys $bindings]} {
      self
    } else {
      $outer_env find $sym
    }
  }
  method get {sym} {
    dict get $bindings $sym
  }
  method set {sym val} {
    dict set bindings $sym $val
  }
}
CB)

H3 MIT Scheme environment library

MD(
Definition my MIT, implementation by me.
MD)

H4 Environment procedures

H9

CB(
proc environment? {object} {
  #Returns #t if object is an environment; otherwise returns #f.
  typeof? $object Environment
}

proc environment-has-parent? {env} {
  # Returns #t if environment has a parent environment; otherwise returns #f.
  if {[$env parent] ne "#NIL"} {
    return #t
  } else {
    return #f
  }
}

proc environment-parent {env} {
  # Returns the parent environment of environment. It is an error if environment has no parent.
  set parent [$env parent]
  if {$parent ne "#NIL"} {
    return $parent
  } else {
    error "[$env show] has no parent"
  }
}

proc environment-bound-names {env} {
  # Returns a newly allocated list of the names (symbols) that are bound by environment. This does not include the names that are bound by the parent environment of environment.
  list {*}[$env names]
}

proc environment-bindings {env} {
  # Returns a newly allocated list of the bindings of environment; does not include the bindings of the parent environment. Each element of this list takes one of two forms: (name) indicates that name is bound but unassigned, while (name object) indicates that name is bound, and its value is object.
  list {*}[$env bindings]
}

proc environment-bound? {env sym} {
  # Returns #t if symbol is bound in environment or one of its ancestor environments; otherwise returns #f.
  set e [$env find $sym]
  if {$e eq "::constcl::null_env"} {
    return #f
  } else {
    return #t
  }
}

proc environment-lookup {env sym} {
  # Symbol must be bound in environment or one of its ancestor environments. Returns the value to which it is bound.
  if {[T [environment-bound? $sym]]} {
    lookup $sym [$env find $sym]
  }
}

proc environment-assignable? {env sym} {
  # Symbol must be bound in environment or one of its ancestor environments. Returns #t if the binding may be modified by side effect.
}

proc environment-assign! {env sym obj} {
  # Symbol must be bound in environment or one of its ancestor environments, and must be assignable. Modifies the binding to have object as its value, and returns an unspecified result.
}

proc environment-eval {expr env} {
  # Evaluates expression, a list-structure representation (sometimes called s-expression representation) of a Scheme expression, in environment. You rarely need eval in ordinary programs; it is useful mostly for evaluating expressions that have been created "on the fly" by a program. eval is relatively expensive because it must convert expression to an internal form before it is executed.
}
CB)

H3 Lexical scoping

MD(
Example:
MD)

VB(
ConsTcl> (define (circle-area r) (* pi (* r r)))
ConsTcl> (circle-area 10)
314.1592653589793
VB)

MD(
During a call to the procedure K{circle-area}, the symbol K{r} is bound to the
value 10. But we don't want the binding to go into the global environment,
possibly clobbering an earlier definition of K{r}. The solution is to use
separate (but linked) environments, making K{r}'s binding a
W{local variable}{Local_variable}I{local variable}
in its own environment, which the procedure will be evaluated in. The symbols
K{*} and K{pi} will still be available through the local environment's link
to the outer global environment. This is all part of
W{lexical scoping}{Scope_(computer_science)#Lexical_scope}I{lexical scope}.

In the first image, we see the global environment before we call K{circle-area}
(and also the empty null environment which the global environment links to):

IG /images/env1.png

During the call. Note how the global K{r} is shadowed by the local one, and how
the local environment links to the global one to find K{*} and K{pi}. 

IG /images/env2.png

After the call, we are back to the first state again.

IG /images/env1.png
MD)

# vim: ft=tcl tw=80 ts=2 sw=2 sts=2 et 
