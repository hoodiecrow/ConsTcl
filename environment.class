MD(

## Environment class and objects

The class for environments is called __Environment__. It is mostly a wrapper around a dictionary,
with the added finesse of keeping a link to the outer environment (starting a chain that goes all
the way to the global environment and then stops at the null environment) which can be traversed
by the find method to find which innermost environment a given symbol is bound in.
MD)

CB
catch { Environment destroy }

oo::class create Environment {
    variable bindings outer_env
    constructor {syms vals {outer {}}} {
        set bindings [dict create]
        if {$syms eq "#NIL"} {
            if {[llength $vals]} { error "too many arguments" }
        } elseif {[::constcl::list? $syms] eq "#t"} {
            set syms [lmap sym [::constcl::splitlist $syms] {$sym name}]
            foreach sym $syms val $vals {
                my set $sym $val
            }
        } elseif {[::constcl::symbol? $syms] eq "#t"} {
            my set [$syms name] [::constcl::list {*}$vals]
        } else {
            while {[::constcl::null? $syms] ne "#t"} {
                if {[::constcl::symbol? [::constcl::cdr $syms]] eq "#t"} {
                    my set [[::constcl::car $syms] name] [lindex $vals 0] ; set vals [lrange $vals 1 end]
                    my set [[::constcl::cdr $syms] name] [::constcl::list {*}$vals] ; set vals {}
                    break
                } else {
                    my set [[::constcl::car $syms] name] [lindex $vals 0] ; set vals [lrange $vals 1 end]
                    set syms [::constcl::cdr $syms]
                }
                #if {[llength $vals] < 1} { error "too few arguments" }
            }
            if {[llength $vals] > 0} { error "too many arguments $vals" }
        }
        set outer_env $outer
    }
    method find {sym} {
        if {$sym in [dict keys $bindings]} {
            self
        } else {
            $outer_env find $sym
        }
    }
    method get {sym} {
        dict get $bindings $sym
    }
    method set {sym val} {
        dict set bindings $sym $val
    }
}
CB

